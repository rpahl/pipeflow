% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeflow_aliases.R
\name{pipe_collect_out}
\alias{pipe_collect_out}
\title{Collect output from entire pipeline}
\usage{
pipe_collect_out(pip, ...)
}
\arguments{
\item{groupBy}{\code{string} column of pipeline by which to group the
output. To see all available columns,}

\item{all}{\code{logical} if \code{TRUE} all output is collected
regardless of the \code{keepOut} flag. This can be useful for debugging.}
}
\value{
\code{list} containing the output, named after the groups, which,
by default, are the steps.
}
\description{
Collects output afer pipeline run, by default, from all
steps for which \code{keepOut} was set to \code{TRUE}. The output is grouped
by the group names (see also \code{group} parameter in \code{\link[=pipe_add]{pipe_add()}}),
which by default are set identical to the step names.
}
\examples{
p <- Pipeline$new("pipe", data = 1:2)
p$add("step1", \(x = ~data) x + 2)
p$add("step2", \(x = ~step1) x + 2, keepOut = TRUE)
p$run()
p$collect_out()
p$collect_out(all = TRUE) |> str()

# Grouped output
p <- Pipeline$new("pipe", data = 1:2)
p$add("step1", \(x = ~data) x + 2, group = "add")
p$add("step2", \(x = ~step1, y = 2) x + y, group = "add")
p$add("step3", \(x = ~data) x * 3, group = "mult")
p$add("step4", \(x = ~data, y = 2) x * y, group = "mult")
p
p$run()
p$collect_out(all = TRUE) |> str()

# Grouped by state
p$set_params(list(y = 5))
p
p$collect_out(groupBy = "state", all = TRUE) |> str()
}
