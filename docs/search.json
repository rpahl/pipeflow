[{"path":"https://github.com/rpahl/pipeflow/articles/collect-output.html","id":"flag-output-steps","dir":"Articles","previous_headings":"","what":"Flag output steps","title":"Collecting output","text":"Output steps flagged settting keepOut argument TRUE adding step pipeline. following example, want keep output steps data_summary, model_summary, model_plot. Looking pipeline, see steps data_summary, model-summary, model_plot flagged accordingly (see column keepOut). Graphically, steps flagged keepOut = TRUE displayed circle shape “normal” steps shown rectangle boxes. Now let’s run collect output flagged steps using collect_out method, returns list output flagged steps. expected, output list contains output flagged steps.","code":"library(pipeflow) library(ggplot2)  pip <- pipe_new(         \"my-pipeline\",         data = airquality     ) |>      pipe_add(         \"data_prep\",         function(data = ~data) {             replace(data, \"Temp.Celsius\", (data[, \"Temp\"] - 32) * 5/9)         }     ) |>      pipe_add(         \"data_summary\",         function(             data = ~data_prep,             xVar = \"Temp.Celsius\",             yVar = \"Ozone\"         ) {             data[, c(xVar, yVar)]         },         keepOut = TRUE              # <- keep this     ) |>      pipe_add(         \"model_fit\",         function(             data = ~data_prep,             xVar = \"Temp.Celsius\",             yVar = \"Ozone\"         ) {             lm(paste(yVar, \"~\", xVar), data = data)         }     ) |>      pipe_add(         \"model_summary\",         function(             fit = ~model_fit         ) {             summary(fit)         },         keepOut = TRUE              # <- keep this     ) |>      pipe_add(         \"model_plot\",         function(             model = ~model_fit,             data = ~data_prep,             xVar = \"Temp.Celsius\",             yVar = \"Ozone\",             title = \"Linear model fit\"         ) {             coeffs <- coefficients(model)             ggplot(data) +                 geom_point(aes(.data[[xVar]], .data[[\"Ozone\"]])) +                 geom_abline(intercept = coeffs[1], slope = coeffs[2]) +                 labs(title = title)         },         keepOut = TRUE              # <- keep this     ) pip #             step             depends    out keepOut         group  state #           <char>              <list> <list>  <lgcl>        <char> <char> # 1:          data                     [NULL]   FALSE          data    New # 2:     data_prep                data [NULL]   FALSE     data_prep    New # 3:  data_summary           data_prep [NULL]    TRUE  data_summary    New # 4:     model_fit           data_prep [NULL]   FALSE     model_fit    New # 5: model_summary           model_fit [NULL]    TRUE model_summary    New # 6:    model_plot model_fit,data_prep [NULL]    TRUE    model_plot    New pip$run() # INFO  [2024-12-02 10:11:22.854] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:22.885] Step 1/6 data # INFO  [2024-12-02 10:11:22.897] Step 2/6 data_prep # INFO  [2024-12-02 10:11:22.923] Step 3/6 data_summary # INFO  [2024-12-02 10:11:22.925] Step 4/6 model_fit # INFO  [2024-12-02 10:11:22.929] Step 5/6 model_summary # INFO  [2024-12-02 10:11:22.938] Step 6/6 model_plot # INFO  [2024-12-02 10:11:22.952] Finished execution of steps. # INFO  [2024-12-02 10:11:22.952] Done.  out <- pip$collect_out()  names(out) # [1] \"data_summary\"  \"model_summary\" \"model_plot\" str(out, max.level = 1) # List of 3 #  $ data_summary :'data.frame':    153 obs. of  2 variables: #  $ model_summary:List of 12 #   ..- attr(*, \"class\")= chr \"summary.lm\" #  $ model_plot   :List of 11 #   ..- attr(*, \"class\")= chr [1:2] \"gg\" \"ggplot\""},{"path":"https://github.com/rpahl/pipeflow/articles/collect-output.html","id":"grouping-output-steps","dir":"Articles","previous_headings":"","what":"Grouping output steps","title":"Collecting output","text":"Often certain output steps related grouped together. can achieved conveniently setting group argument adding step pipeline. Let’s illustrate slightly modifying previous example. Looking pipeline, defined groups shown group column. see, default, group identical step name, , step represents trivial case one-sized group. , run pipeline collect output. can see, output related modelling grouped one sublist named Model.","code":"pip <- Pipeline$new(\"my-pipeline\", data = airquality) |>      pipe_add(         \"data_prep\",         function(data = ~data) {             replace(data, \"Temp.Celsius\", (data[, \"Temp\"] - 32) * 5/9)         }     ) |>      pipe_add(         \"used_data\",         function(             data = ~data_prep,             xVar = \"Temp.Celsius\",             yVar = \"Ozone\"         ) {             data[, c(xVar, yVar)]         },         keepOut = TRUE,         group = \"Data\"                 # <- define 'Data' group here     ) |>      pipe_add(         \"model_fit\",         function(             data = ~data_prep,             xVar = \"Temp.Celsius\",             yVar = \"Ozone\"         ) {             lm(paste(yVar, \"~\", xVar), data = data)         }     ) |>      pipe_add(         \"model_summary\",         function(             fit = ~model_fit         ) {             summary(fit)         },         keepOut = TRUE,         group = \"Model\"                # <- define 'Model' group here     ) |>      pipe_add(         \"model_plot\",         function(             model = ~model_fit,             data = ~data_prep,             xVar = \"Temp.Celsius\",             yVar = \"Ozone\",             title = \"Linear model fit\"         ) {             coeffs <- coefficients(model)             ggplot(data) +                 geom_point(aes(.data[[xVar]], .data[[\"Ozone\"]])) +                 geom_abline(intercept = coeffs[1], slope = coeffs[2]) +                 labs(title = title)         },         keepOut = TRUE,         group = \"Model\"                # <- define 'Model' group here     ) pip #             step             depends    out keepOut     group  state #           <char>              <list> <list>  <lgcl>    <char> <char> # 1:          data                     [NULL]   FALSE      data    New # 2:     data_prep                data [NULL]   FALSE data_prep    New # 3:     used_data           data_prep [NULL]    TRUE      Data    New # 4:     model_fit           data_prep [NULL]   FALSE model_fit    New # 5: model_summary           model_fit [NULL]    TRUE     Model    New # 6:    model_plot model_fit,data_prep [NULL]    TRUE     Model    New pip$run() # INFO  [2024-12-02 10:11:23.185] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:23.187] Step 1/6 data # INFO  [2024-12-02 10:11:23.190] Step 2/6 data_prep # INFO  [2024-12-02 10:11:23.192] Step 3/6 used_data # INFO  [2024-12-02 10:11:23.194] Step 4/6 model_fit # INFO  [2024-12-02 10:11:23.219] Step 5/6 model_summary # INFO  [2024-12-02 10:11:23.221] Step 6/6 model_plot # INFO  [2024-12-02 10:11:23.226] Finished execution of steps. # INFO  [2024-12-02 10:11:23.227] Done.  out <- pip$collect_out()  names(out) # [1] \"Data\"  \"Model\" str(out, max.level = 2) # List of 2 #  $ Data :'data.frame':    153 obs. of  2 variables: #   ..$ Temp.Celsius: num [1:153] 19.4 22.2 23.3 16.7 13.3 ... #   ..$ Ozone       : int [1:153] 41 36 12 18 NA 28 23 19 8 NA ... #  $ Model:List of 2 #   ..$ model_summary:List of 12 #   .. ..- attr(*, \"class\")= chr \"summary.lm\" #   ..$ model_plot   :List of 11 #   .. ..- attr(*, \"class\")= chr [1:2] \"gg\" \"ggplot\""},{"path":"https://github.com/rpahl/pipeflow/articles/combine-pipelines.html","id":"define-two-pipelines","dir":"Articles","previous_headings":"","what":"Define two pipelines","title":"Combining pipelines","text":"Let’s define one pipeline used data_preprocessing one modeling. Data preprocessing pipeline: Modeling pipeline: Graphically, two pipelines look follows:","code":"library(pipeflow) library(ggplot2)  pip1 <- pipe_new(         \"preprocessing\",         data = airquality     ) |>      pipe_add(         \"data_prep\",         function(data = ~data) {             replace(data, \"Temp.Celsius\", (data[, \"Temp\"] - 32) * 5/9)         }     ) |>      pipe_add(         \"standardize\",         function(             data = ~data_prep,             yVar = \"Ozone\"         ) {             data[, yVar] <- scale(data[, yVar])             data         }     ) pip1 #           step   depends    out keepOut       group  state #         <char>    <list> <list>  <lgcl>      <char> <char> # 1:        data           [NULL]   FALSE        data    New # 2:   data_prep      data [NULL]   FALSE   data_prep    New # 3: standardize data_prep [NULL]   FALSE standardize    New pip2 <- pipe_new(         \"modeling\",         data = airquality     ) |>      pipe_add(         \"fit\",         function(             data = ~data,             xVar = \"Temp\",             yVar = \"Ozone\"         ) {             lm(paste(yVar, \"~\", xVar), data = data)         }     ) |>      pipe_add(         \"plot\",         function(             model = ~fit,             data = ~data,             xVar = \"Temp\",             yVar = \"Ozone\",             title = \"Linear model fit\"         ) {             coeffs <- coefficients(model)             ggplot(data) +                 geom_point(aes(.data[[xVar]], .data[[yVar]])) +                 geom_abline(intercept = coeffs[1], slope = coeffs[2]) +                 labs(title = title)         }     ) pip2 #      step  depends    out keepOut  group  state #    <char>   <list> <list>  <lgcl> <char> <char> # 1:   data          [NULL]   FALSE   data    New # 2:    fit     data [NULL]   FALSE    fit    New # 3:   plot fit,data [NULL]   FALSE   plot    New"},{"path":"https://github.com/rpahl/pipeflow/articles/combine-pipelines.html","id":"combine-pipelines","dir":"Articles","previous_headings":"","what":"Combine pipelines","title":"Combining pipelines","text":"Next combine two pipelines. can using append function. First , note data step second pipeline appended name second pipeline. particular, first step second pipeline renamed data data.modeling (line 4 step column) likewise dependencies second pipeline updated (see lines 5-6 depends column). , appending two pipelines, pipeflow ensures step names remain unique resulting combined pipeline therefore automatically renames duplicated step names necessary. Now, can also seen graphical representation pipeline, two pipelines yet connected. make actual use combined pipeline, therefore want use output first pipeline input second pipeline, , want use output standardize step data parameter input data.modeling step. One way achieve use replace function described earlier vignette modify pipeline, example:","code":"pip <- pip1$append(pip2)  pip #             step           depends    out keepOut       group  state #           <char>            <list> <list>  <lgcl>      <char> <char> # 1:          data                   [NULL]   FALSE        data    New # 2:     data_prep              data [NULL]   FALSE   data_prep    New # 3:   standardize         data_prep [NULL]   FALSE standardize    New # 4: data.modeling                   [NULL]   FALSE        data    New # 5:           fit     data.modeling [NULL]   FALSE         fit    New # 6:          plot fit,data.modeling [NULL]   FALSE        plot    New pip$replace_step(\"data.modeling\", function(data = ~standardize) data)  pip #             step           depends    out keepOut         group    state #           <char>            <list> <list>  <lgcl>        <char>   <char> # 1:          data                   [NULL]   FALSE          data      New # 2:     data_prep              data [NULL]   FALSE     data_prep      New # 3:   standardize         data_prep [NULL]   FALSE   standardize      New # 4: data.modeling       standardize [NULL]   FALSE data.modeling      New # 5:           fit     data.modeling [NULL]   FALSE           fit Outdated # 6:          plot fit,data.modeling [NULL]   FALSE          plot Outdated"},{"path":"https://github.com/rpahl/pipeflow/articles/combine-pipelines.html","id":"relative-indexing","dir":"Articles","previous_headings":"Combine pipelines","what":"Relative indexing","title":"Combining pipelines","text":"Since name last step might always known1, pipeflow package also provides relative position indexing mechanism, allows rewrite command follows: Generally speaking, relative indexing mechanism allows refer steps positioned current step. index ~-1 can interpreted “go one step back”, ~-2 “go two steps back”, . Since scenario connecting two pipelines common avoid replacement steps manually, append function actually provides argument outAsIn allows appending “connecting” pipelines one go: inspect data.modeling step, see “hood” original step indeed replaced output last step first pipeline using relative indexing mechanism manually .","code":"pip$replace_step(\"data.modeling\", function(data = ~-1) data)  pip #             step           depends    out keepOut         group    state #           <char>            <list> <list>  <lgcl>        <char>   <char> # 1:          data                   [NULL]   FALSE          data      New # 2:     data_prep              data [NULL]   FALSE     data_prep      New # 3:   standardize         data_prep [NULL]   FALSE   standardize      New # 4: data.modeling       standardize [NULL]   FALSE data.modeling      New # 5:           fit     data.modeling [NULL]   FALSE           fit Outdated # 6:          plot fit,data.modeling [NULL]   FALSE          plot Outdated pip <- pip1$append(pip2, outAsIn = TRUE)  pip #             step           depends    out keepOut         group    state #           <char>            <list> <list>  <lgcl>        <char>   <char> # 1:          data                   [NULL]   FALSE          data      New # 2:     data_prep              data [NULL]   FALSE     data_prep      New # 3:   standardize         data_prep [NULL]   FALSE   standardize      New # 4: data.modeling       standardize [NULL]   FALSE data.modeling      New # 5:           fit     data.modeling [NULL]   FALSE           fit Outdated # 6:          plot fit,data.modeling [NULL]   FALSE          plot Outdated pip$get_step(\"data.modeling\")[[\"fun\"]] # [[1]] # function (data = ~-1)  # data # <bytecode: 0x0000027d5458de40> # <environment: 0x0000027d501b7a00>"},{"path":"https://github.com/rpahl/pipeflow/articles/combine-pipelines.html","id":"run-combined-pipeline","dir":"Articles","previous_headings":"","what":"Run combined pipeline","title":"Combining pipelines","text":"Let’s now run combined pipeline inspect plot.  can see, plot shows linear model fit using standardized data. can now go ahead example change x-variable model rerun pipeline.  creating pipelines, usually lot steps calculating intermediate results steps contain final results interested . example, interested final plot output. real-world scenario, pipeline contain many steps interest us. see conveniently tag, collect possibly group output final steps, see next vignette Collecting output.","code":"pip$run() # INFO  [2024-12-02 10:11:27.871] Start run of 'preprocessing.modeling' pipeline: # INFO  [2024-12-02 10:11:27.944] Step 1/6 data # INFO  [2024-12-02 10:11:27.953] Step 2/6 data_prep # INFO  [2024-12-02 10:11:27.969] Step 3/6 standardize # INFO  [2024-12-02 10:11:27.972] Step 4/6 data.modeling # INFO  [2024-12-02 10:11:27.974] Step 5/6 fit # INFO  [2024-12-02 10:11:27.979] Step 6/6 plot # INFO  [2024-12-02 10:11:27.992] Finished execution of steps. # INFO  [2024-12-02 10:11:27.993] Done. pip$get_out(\"plot\") # Warning: Removed 37 rows containing missing values or values outside the scale range # (`geom_point()`). pip$set_params(list(xVar = \"Temp.Celsius\")) pip$run() # INFO  [2024-12-02 10:11:29.012] Start run of 'preprocessing.modeling' pipeline: # INFO  [2024-12-02 10:11:29.013] Step 1/6 data - skip 'done' step # INFO  [2024-12-02 10:11:29.014] Step 2/6 data_prep - skip 'done' step # INFO  [2024-12-02 10:11:29.015] Step 3/6 standardize - skip 'done' step # INFO  [2024-12-02 10:11:29.016] Step 4/6 data.modeling - skip 'done' step # INFO  [2024-12-02 10:11:29.017] Step 5/6 fit # INFO  [2024-12-02 10:11:29.022] Step 6/6 plot # INFO  [2024-12-02 10:11:29.042] Finished execution of steps. # INFO  [2024-12-02 10:11:29.042] Done. pip$get_out(\"plot\") # Warning: Removed 37 rows containing missing values or values outside the scale range # (`geom_point()`)."},{"path":"https://github.com/rpahl/pipeflow/articles/get-started.html","id":"a-simple-example-to-get-started","dir":"Articles","previous_headings":"","what":"A simple example to get started","title":"Get started with pipeflow","text":"example, ’ll use base R’s airquality dataset. goal create analysis pipeline performs following steps: add new data column Temp.Celsius containing temperature degrees Celsius fit linear model data plot data model fit. following, ’ll show define run pipeline, inspect output specifics steps, finally re-run pipeline different parameter settings, one selling points using pipeline.","code":"head(airquality) #   Ozone Solar.R Wind Temp Month Day # 1    41     190  7.4   67     5   1 # 2    36     118  8.0   72     5   2 # 3    12     149 12.6   74     5   3 # 4    18     313 11.5   62     5   4 # 5    NA      NA 14.3   56     5   5 # 6    28      NA 14.9   66     5   6"},{"path":"https://github.com/rpahl/pipeflow/articles/get-started.html","id":"define-the-pipeline","dir":"Articles","previous_headings":"A simple example to get started","what":"Define the pipeline","title":"Get started with pipeflow","text":"easier understanding, go step step. First, create new pipeline name “-pipeline” airquality dataset input data. Let’s view pipeline ’s table form initialization. , step represented one row table step column lists name step state column shows current state step. now, don’t worry columns - explained later. can see, data always first step pipeline initially state New, means pipeline run yet. Next, add step called data_prep, consists function takes output data step first argument, adds new column returns modified data output. refer output earlier pipeline step, just write name step preceded tilde (~) operator. , let’s inspect pipeline. second step called data_prep added depends data step can seen column depends, list dependencies step. Next, add step called model_fit, fits linear model data. function takes output data_prep defines parameter xVar, used specify variable used predictor linear model. Lastly, add step called model_plot, plots data linear model fit. function uses output model_fit data_prep step. also defines xVar parameter parameter title, used title plot. completes pipeline, now looks follows: last line, see model_plot step depends model_fit data_prep step. visualize pipeline, can use get_graph() method, returns list arguments can passed visNetwork function visNetwork package.","code":"library(pipeflow) library(ggplot2)  pip <- Pipeline$new(\"my-pipeline\", data = airquality) pip #      step depends    out keepOut  group  state #    <char>  <list> <list>  <lgcl> <char> <char> # 1:   data         [NULL]   FALSE   data    New pip$add(     \"data_prep\",     function(data = ~data) {         replace(data, \"Temp.Celsius\", (data[, \"Temp\"] - 32) * 5/9)     } ) pip #         step depends    out keepOut     group  state #       <char>  <list> <list>  <lgcl>    <char> <char> # 1:      data         [NULL]   FALSE      data    New # 2: data_prep    data [NULL]   FALSE data_prep    New pip$add(     \"model_fit\",     function(         data = ~data_prep,         xVar = \"Temp.Celsius\"     ) {         lm(paste(\"Ozone ~\", xVar), data = data)     } ) pip$add(     \"model_plot\",     function(         model = ~model_fit,         data = ~data_prep,         xVar = \"Temp.Celsius\",         title = \"Linear model fit\"     ) {         coeffs <- coefficients(model)         ggplot(data) +             geom_point(aes(.data[[xVar]], .data[[\"Ozone\"]])) +             geom_abline(intercept = coeffs[1], slope = coeffs[2]) +             labs(title = title)     } ) pip #          step             depends    out keepOut      group  state #        <char>              <list> <list>  <lgcl>     <char> <char> # 1:       data                     [NULL]   FALSE       data    New # 2:  data_prep                data [NULL]   FALSE  data_prep    New # 3:  model_fit           data_prep [NULL]   FALSE  model_fit    New # 4: model_plot model_fit,data_prep [NULL]   FALSE model_plot    New library(visNetwork) do.call(visNetwork, args = pip$get_graph()) |>     visHierarchicalLayout(direction = \"LR\")"},{"path":"https://github.com/rpahl/pipeflow/articles/get-started.html","id":"pipeline-integrity","dir":"Articles","previous_headings":"A simple example to get started","what":"Pipeline integrity","title":"Get started with pipeflow","text":"key feature pipeflow integrity pipeline verified definition time. see , let’s try add another step referring step exist: pipeflow immediately signals error pipeline remains unchanged:","code":"pip$add(     \"another_step\",     function(data = ~foo) {         data     } ) # Error: step 'another_step': dependency 'foo' not found pip #          step             depends    out keepOut      group  state #        <char>              <list> <list>  <lgcl>     <char> <char> # 1:       data                     [NULL]   FALSE       data    New # 2:  data_prep                data [NULL]   FALSE  data_prep    New # 3:  model_fit           data_prep [NULL]   FALSE  model_fit    New # 4: model_plot model_fit,data_prep [NULL]   FALSE model_plot    New"},{"path":"https://github.com/rpahl/pipeflow/articles/get-started.html","id":"run-the-pipeline-and-inspect-the-output","dir":"Articles","previous_headings":"A simple example to get started","what":"Run the pipeline and inspect the output","title":"Get started with pipeflow","text":"run pipeline, simply call run() method pipeline, produce following output: Let’s inspect pipeline . can see state steps changed New Done, graphically represented color change blue green. addition, output added column. can inspect output specific step calling get_out() method pipeline.","code":"pip$run() # INFO  [2024-12-02 10:11:33.606] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:33.635] Step 1/4 data # INFO  [2024-12-02 10:11:33.644] Step 2/4 data_prep # INFO  [2024-12-02 10:11:33.667] Step 3/4 model_fit # INFO  [2024-12-02 10:11:33.671] Step 4/4 model_plot # INFO  [2024-12-02 10:11:33.682] Finished execution of steps. # INFO  [2024-12-02 10:11:33.683] Done. pip #          step             depends                 out keepOut      group  state #        <char>              <list>              <list>  <lgcl>     <char> <char> # 1:       data                     <data.frame[153x6]>   FALSE       data   Done # 2:  data_prep                data <data.frame[153x7]>   FALSE  data_prep   Done # 3:  model_fit           data_prep            <lm[13]>   FALSE  model_fit   Done # 4: model_plot model_fit,data_prep            <gg[11]>   FALSE model_plot   Done pip$get_out(\"model_fit\") #  # Call: # lm(formula = paste(\"Ozone ~\", xVar), data = data) #  # Coefficients: #  (Intercept)  Temp.Celsius   #      -69.277         4.372 pip$get_out(\"model_plot\")"},{"path":"https://github.com/rpahl/pipeflow/articles/get-started.html","id":"change-parameters-of-the-pipeline","dir":"Articles","previous_headings":"A simple example to get started","what":"Change parameters of the pipeline","title":"Get started with pipeflow","text":"parameter pipeline bound specific step (.e. defined tilde (~) operator) can changed calling set_params() method pipeline. Let’s first list unbound parameters: Now let’s assume want change xVar entire pipeline \"Solar.R\". can simply follows: Changing parameters pipeline least effect steps depend changed parameter. can see model_fit model_plot steps now state Outdated (graphically indicated orange color), means need rerun. can calling run() method pipeline . outdated steps re-run expected output updated accordingly.  just change title plot, obviously model_plot step needs rerun.  instead change input data, since steps depend , expect steps rerun.","code":"pip$get_params() # $model_fit # $model_fit$xVar # [1] \"Temp.Celsius\" #  #  # $model_plot # $model_plot$xVar # [1] \"Temp.Celsius\" #  # $model_plot$title # [1] \"Linear model fit\" pip$set_params(list(xVar = \"Solar.R\")) pip$get_params() # $model_fit # $model_fit$xVar # [1] \"Solar.R\" #  #  # $model_plot # $model_plot$xVar # [1] \"Solar.R\" #  # $model_plot$title # [1] \"Linear model fit\" pip #          step             depends                 out keepOut      group    state #        <char>              <list>              <list>  <lgcl>     <char>   <char> # 1:       data                     <data.frame[153x6]>   FALSE       data     Done # 2:  data_prep                data <data.frame[153x7]>   FALSE  data_prep     Done # 3:  model_fit           data_prep            <lm[13]>   FALSE  model_fit Outdated # 4: model_plot model_fit,data_prep            <gg[11]>   FALSE model_plot Outdated pip$run() # INFO  [2024-12-02 10:11:34.630] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:34.631] Step 1/4 data - skip 'done' step # INFO  [2024-12-02 10:11:34.632] Step 2/4 data_prep - skip 'done' step # INFO  [2024-12-02 10:11:34.633] Step 3/4 model_fit # INFO  [2024-12-02 10:11:34.637] Step 4/4 model_plot # INFO  [2024-12-02 10:11:34.646] Finished execution of steps. # INFO  [2024-12-02 10:11:34.646] Done. pip$get_out(\"model_plot\") pip$set_params(list(title = \"Some new title\")) pip #          step             depends                 out keepOut      group    state #        <char>              <list>              <list>  <lgcl>     <char>   <char> # 1:       data                     <data.frame[153x6]>   FALSE       data     Done # 2:  data_prep                data <data.frame[153x7]>   FALSE  data_prep     Done # 3:  model_fit           data_prep            <lm[13]>   FALSE  model_fit     Done # 4: model_plot model_fit,data_prep            <gg[11]>   FALSE model_plot Outdated pip$run()$get_out(\"model_plot\") # INFO  [2024-12-02 10:11:35.026] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:35.029] Step 1/4 data - skip 'done' step # INFO  [2024-12-02 10:11:35.030] Step 2/4 data_prep - skip 'done' step # INFO  [2024-12-02 10:11:35.031] Step 3/4 model_fit - skip 'done' step # INFO  [2024-12-02 10:11:35.032] Step 4/4 model_plot # INFO  [2024-12-02 10:11:35.037] Finished execution of steps. # INFO  [2024-12-02 10:11:35.038] Done. pip$set_data(airquality[1:10, ]) pip #          step             depends                 out keepOut      group    state #        <char>              <list>              <list>  <lgcl>     <char>   <char> # 1:       data                                  [NULL]   FALSE       data      New # 2:  data_prep                data <data.frame[153x7]>   FALSE  data_prep Outdated # 3:  model_fit           data_prep            <lm[13]>   FALSE  model_fit Outdated # 4: model_plot model_fit,data_prep            <gg[11]>   FALSE model_plot Outdated pip$run()$get_out(\"model_plot\") # INFO  [2024-12-02 10:11:35.326] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:35.327] Step 1/4 data # INFO  [2024-12-02 10:11:35.330] Step 2/4 data_prep # INFO  [2024-12-02 10:11:35.334] Step 3/4 model_fit # INFO  [2024-12-02 10:11:35.337] Step 4/4 model_plot # INFO  [2024-12-02 10:11:35.345] Finished execution of steps. # INFO  [2024-12-02 10:11:35.346] Done."},{"path":"https://github.com/rpahl/pipeflow/articles/get-started.html","id":"try-setting-non-existing-parameters","dir":"Articles","previous_headings":"A simple example to get started","what":"Try setting non-existing parameters","title":"Get started with pipeflow","text":"Last least let’s see happens trying set parameters don’t exist pipeline, mostly happens due accidental misspells. see, warning given user hinting respective parameter names, makes fixing misspells straight-forward. Next, let’s see modify pipeline.","code":"pip$set_params(list(titel = \"my title but misspelled variable name\", foo = \"my foo\")) # Warning in pip$set_params(list(titel = \"my title but misspelled variable name\", : Trying to set # parameters not defined in the pipeline: titel, foo"},{"path":"https://github.com/rpahl/pipeflow/articles/modify-pipeline.html","id":"existing-pipeline","dir":"Articles","previous_headings":"","what":"Existing pipeline","title":"Modifying existing pipelines","text":"Let’s start left Get started pipeflow vignette, , following pipeline following set data","code":"pip #          step             depends                out keepOut      group  state #        <char>              <list>             <list>  <lgcl>     <char> <char> # 1:       data                     <data.frame[10x6]>   FALSE       data   Done # 2:  data_prep                data <data.frame[10x7]>   FALSE  data_prep   Done # 3:  model_fit           data_prep           <lm[13]>   FALSE  model_fit   Done # 4: model_plot model_fit,data_prep           <gg[11]>   FALSE model_plot   Done pip$get_data() |> head(3) #   Ozone Solar.R Wind Temp Month Day # 1    41     190  7.4   67     5   1 # 2    36     118  8.0   72     5   2 # 3    12     149 12.6   74     5   3"},{"path":"https://github.com/rpahl/pipeflow/articles/modify-pipeline.html","id":"insert-new-step","dir":"Articles","previous_headings":"","what":"Insert new step","title":"Modifying existing pipelines","text":"Let’s say want insert new step data_prep step standardizes y-variable. can see, standardize step now part pipeline, far used step.","code":"pip$insert_after(     afterStep = \"data_prep\",     step = \"standardize\",     function(         data = ~`data_prep`,         yVar = \"Ozone\"     ) {         data[, yVar] <- scale(data[, yVar])         data     } ) pip #           step             depends                out keepOut       group  state #         <char>              <list>             <list>  <lgcl>      <char> <char> # 1:        data                     <data.frame[10x6]>   FALSE        data   Done # 2:   data_prep                data <data.frame[10x7]>   FALSE   data_prep   Done # 3: standardize           data_prep             [NULL]   FALSE standardize    New # 4:   model_fit           data_prep           <lm[13]>   FALSE   model_fit   Done # 5:  model_plot model_fit,data_prep           <gg[11]>   FALSE  model_plot   Done library(visNetwork) do.call(visNetwork, args = pip$get_graph()) |>     visHierarchicalLayout(direction = \"LR\", sortMethod = \"directed\")"},{"path":"https://github.com/rpahl/pipeflow/articles/modify-pipeline.html","id":"replace-existing-steps","dir":"Articles","previous_headings":"","what":"Replace existing steps","title":"Modifying existing pipelines","text":"Let’s revisit function definition model_fit step use standardized data, need change data dependency refers standardize step. Also instead fixed y-variable model, want pass paramter. model_plot step needs updated similar way. updated pipeline now looks follows. see model_fit model_plot steps now use standardized data. Let’s re-run pipeline inspect output.","code":"pip$get_step(\"model_fit\")[[\"fun\"]] # [[1]] # function (data = ~data_prep, xVar = \"Temp.Celsius\")  # { #     lm(paste(\"Ozone ~\", xVar), data = data) # } pip$replace_step(     \"model_fit\",     function(         data = ~standardize,        # <- changed data reference         xVar = \"Temp.Celsius\",         yVar = \"Ozone\"              # <- new y-variable     ) {         lm(paste(yVar, \"~\", xVar), data = data)     } ) pip$replace_step(     \"model_plot\",     function(         model = ~model_fit,         data = ~standardize,         # <- changed data reference         xVar = \"Temp.Celsius\",         yVar = \"Ozone\",              # <- new y-variable         title = \"Linear model fit\"     ) {         coeffs <- coefficients(model)         ggplot(data) +             geom_point(aes(.data[[xVar]], .data[[yVar]])) +             geom_abline(intercept = coeffs[1], slope = coeffs[2]) +             labs(title = title)     } ) pip #           step               depends                out keepOut       group  state #         <char>                <list>             <list>  <lgcl>      <char> <char> # 1:        data                       <data.frame[10x6]>   FALSE        data   Done # 2:   data_prep                  data <data.frame[10x7]>   FALSE   data_prep   Done # 3: standardize             data_prep             [NULL]   FALSE standardize    New # 4:   model_fit           standardize             [NULL]   FALSE   model_fit    New # 5:  model_plot model_fit,standardize             [NULL]   FALSE  model_plot    New pip$set_params(list(xVar = \"Solar.R\", yVar = \"Wind\")) pip$run() # INFO  [2024-12-02 10:11:39.870] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:39.871] Step 1/5 data - skip 'done' step # INFO  [2024-12-02 10:11:39.872] Step 2/5 data_prep - skip 'done' step # INFO  [2024-12-02 10:11:39.873] Step 3/5 standardize # INFO  [2024-12-02 10:11:39.875] Step 4/5 model_fit # INFO  [2024-12-02 10:11:39.878] Step 5/5 model_plot # INFO  [2024-12-02 10:11:39.884] Finished execution of steps. # INFO  [2024-12-02 10:11:39.885] Done. pip$get_out(\"model_fit\") |> coefficients() #  (Intercept)      Solar.R  #  0.979672739 -0.006625601 pip$get_out(\"model_plot\") # Warning: Removed 2 rows containing missing values or values outside the scale range # (`geom_point()`)."},{"path":"https://github.com/rpahl/pipeflow/articles/modify-pipeline.html","id":"removing-steps","dir":"Articles","previous_headings":"","what":"Removing steps","title":"Modifying existing pipelines","text":"Let’s see pipeline . trying remove step, pipeflow default checks step used step. , raise error. enforce removing step together downstream dependencies, can use recursive argument. Naturally, last step never downstream dependencies, can removed without issues. another way just remove last step. Replacing steps pipeline shown vignette allow re-use existing pipelines adapt programmatically new requirements. Another way re-using pipelines combine , shown Combining pipelines vignette.","code":"pip #           step               depends                out keepOut       group  state #         <char>                <list>             <list>  <lgcl>      <char> <char> # 1:        data                       <data.frame[10x6]>   FALSE        data   Done # 2:   data_prep                  data <data.frame[10x7]>   FALSE   data_prep   Done # 3: standardize             data_prep <data.frame[10x7]>   FALSE standardize   Done # 4:   model_fit           standardize           <lm[13]>   FALSE   model_fit   Done # 5:  model_plot model_fit,standardize           <gg[11]>   FALSE  model_plot   Done try(pip$remove_step(\"standardize\")) # Error in pip$remove_step(\"standardize\") :  #   cannot remove step 'standardize' because the following steps depend on it: 'model_fit', 'model_plot' pip$remove_step(\"standardize\", recursive = TRUE) # Removing step 'standardize' and its downstream dependencies: 'model_fit', 'model_plot' pip #         step depends                out keepOut     group  state #       <char>  <list>             <list>  <lgcl>    <char> <char> # 1:      data         <data.frame[10x6]>   FALSE      data   Done # 2: data_prep    data <data.frame[10x7]>   FALSE data_prep   Done pip$pop_step() # [1] \"data_prep\" pip #      step depends                out keepOut  group  state #    <char>  <list>             <list>  <lgcl> <char> <char> # 1:   data         <data.frame[10x6]>   FALSE   data   Done"},{"path":"https://github.com/rpahl/pipeflow/articles/self-modify-pipeline.html","id":"changing-pipeline-parameters-at-runtime","dir":"Articles","previous_headings":"","what":"Changing pipeline parameters at runtime","title":"Advanced: How pipelines can modify themselves at runtime","text":"Let’s first define pipeline, fits linear model, checks ’s residuals normality using Shapiro-Wilk test, plots residuals. pipeline looks like can run like  Now let’s imagine, want change color points plot depending Shapiro-Wilk test result. obvious way change plot step passing test result plot step function change color . However, interested another way keep plot function unchanged. example, run pipeline second time follows:  mentioned another vignette, solution ideal, requires run additional code outside pipeline framework. solve issue, therefore basically set parameter within pipeline execution. , make pipeline aware , can done passing pipeline object parameter. Let’s update residual_shapiro_p_value step example. Now just make sure set .self parameter.  simple “trick” opens wide range possibilities pipeline modifications runtime. show next section, limited changing parameters can also used modify pipeline structure .","code":"library(pipeflow) library(ggplot2)  pip <- pipe_new(\"my-pipeline\") |>      pipe_add(         \"fit\",         function(data = ~data, xVar = \"x\", yVar = \"y\")         {             lm(paste(yVar, \"~\", xVar), data = data)         }     ) |>      pipe_add(         \"residual_shapiro_p_value\",         function(fit = ~fit)         {             residuals <- residuals(fit)             p <- shapiro.test(residuals)$p.value             p         },         keepOut = TRUE     ) |>      pipe_add(         \"plot\",         function(fit = ~fit, pointColor = \"black\")         {             data <- data.frame(                 fitted = predict(fit),                 residuals = residuals(fit)             )              ggplot(data, aes(x = fitted, y = residuals)) +                 geom_point(shape = 21, color = pointColor) +                 geom_hline(yintercept = 0, linetype = \"dashed\") +                 theme_minimal()         },         keepOut = TRUE     ) pip #                        step depends    out keepOut                    group  state #                      <char>  <list> <list>  <lgcl>                   <char> <char> # 1:                     data         [NULL]   FALSE                     data    New # 2:                      fit    data [NULL]   FALSE                      fit    New # 3: residual_shapiro_p_value     fit [NULL]    TRUE residual_shapiro_p_value    New # 4:                     plot     fit [NULL]    TRUE                     plot    New pip$set_data(airquality) pip$set_params(list(xVar = \"Ozone\", yVar = \"Temp\")) pip$run()$collect_out() # INFO  [2024-12-02 10:11:44.043] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:44.072] Step 1/4 data # INFO  [2024-12-02 10:11:44.087] Step 2/4 fit # INFO  [2024-12-02 10:11:44.104] Step 3/4 residual_shapiro_p_value # INFO  [2024-12-02 10:11:44.109] Step 4/4 plot # INFO  [2024-12-02 10:11:44.126] Finished execution of steps. # INFO  [2024-12-02 10:11:44.126] Done. # $residual_shapiro_p_value # [1] 0.00022598 #  # $plot if (pip$get_out(\"residual_shapiro_p_value\") < 0.05) {     pip$set_params(list(pointColor = \"red\"))     pip$run()$collect_out() } # INFO  [2024-12-02 10:11:44.524] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:44.526] Step 1/4 data - skip 'done' step # INFO  [2024-12-02 10:11:44.527] Step 2/4 fit - skip 'done' step # INFO  [2024-12-02 10:11:44.528] Step 3/4 residual_shapiro_p_value - skip 'done' step # INFO  [2024-12-02 10:11:44.529] Step 4/4 plot # INFO  [2024-12-02 10:11:44.542] Finished execution of steps. # INFO  [2024-12-02 10:11:44.542] Done. # $residual_shapiro_p_value # [1] 0.00022598 #  # $plot pip$replace_step(     \"residual_shapiro_p_value\",     function(         fit = ~fit,         .self = NULL     ) {         residuals <- residuals(fit)         p <- shapiro.test(residuals)$p.value          if (!is.null(.self) && p < 0.05) {             .self$set_params(list(pointColor = \"red\"))         }          p     },     keepOut = TRUE ) pip$set_data(airquality) pip$set_params(list(xVar = \"Ozone\", yVar = \"Temp\", .self = pip)) pip$run()$collect_out() # INFO  [2024-12-02 10:11:44.843] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:44.844] Step 1/4 data # INFO  [2024-12-02 10:11:44.846] Step 2/4 fit # INFO  [2024-12-02 10:11:44.851] Step 3/4 residual_shapiro_p_value # INFO  [2024-12-02 10:11:44.855] Step 4/4 plot # INFO  [2024-12-02 10:11:44.861] Finished execution of steps. # INFO  [2024-12-02 10:11:44.862] Done. # $residual_shapiro_p_value # [1] 0.00022598 #  # $plot"},{"path":"https://github.com/rpahl/pipeflow/articles/self-modify-pipeline.html","id":"changing-the-pipeline-structure-at-runtime","dir":"Articles","previous_headings":"","what":"Changing the pipeline structure at runtime","title":"Advanced: How pipelines can modify themselves at runtime","text":"Subsequently, pipeline steps comprised basic functions order keep examples simple. focus pipeline structure can modified runtime. pipeline just adds 1, 2, 3 input data, respectively. column table shows output step. Now let’s modify last step pipeline input greater 10, pipeline replace last step new step now instead f2 references f1 subtracts 3 input.","code":"pip <- pipe_new(\"my-pipeline\") |>      pipe_add(         \"f1\",         function(x = ~data) {             x + 1         }     ) |>      pipe_add(         \"f2\",         function(x = ~f1) {             x + 2         }     ) |>      pipe_add(         \"f3\",         function(x = ~f2) {             x + 3         }     ) pip$set_data(1)$run() # INFO  [2024-12-02 10:11:45.117] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:45.118] Step 1/4 data # INFO  [2024-12-02 10:11:45.120] Step 2/4 f1 # INFO  [2024-12-02 10:11:45.122] Step 3/4 f2 # INFO  [2024-12-02 10:11:45.124] Step 4/4 f3 # INFO  [2024-12-02 10:11:45.125] Finished execution of steps. # INFO  [2024-12-02 10:11:45.126] Done. pip #      step depends    out keepOut  group  state #    <char>  <list> <list>  <lgcl> <char> <char> # 1:   data              1   FALSE   data   Done # 2:     f1    data      2   FALSE     f1   Done # 3:     f2      f1      4   FALSE     f2   Done # 4:     f3      f2      7   FALSE     f3   Done"},{"path":"https://github.com/rpahl/pipeflow/articles/self-modify-pipeline.html","id":"modify-a-step","dir":"Articles","previous_headings":"Changing the pipeline structure at runtime","what":"Modify a step","title":"Advanced: How pipelines can modify themselves at runtime","text":"run pipeline , nothing change. Now let’s try input 10. see output pipeline dependencies last step changed.","code":"pip <- pipe_new(\"my-pipeline\") |>      pipe_add(         \"f1\",         function(x = ~data) {             x + 1         }     ) |>      pipe_add(         \"f2\",         function(x = ~f1, .self = NULL)         {             if (x > 10 && !is.null(.self))             {                 .self$replace_step(                     \"f3\",                     function(x = ~f1) {                         x - 3                     }                 )             }             x + 2         }     ) |>      pipe_add(         \"f3\",         function(x = ~f2) {             x + 3         }     ) pip$set_params(list(.self = pip)) pip$set_data(1)$run() # INFO  [2024-12-02 10:11:45.244] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:45.245] Step 1/4 data # INFO  [2024-12-02 10:11:45.247] Step 2/4 f1 # INFO  [2024-12-02 10:11:45.250] Step 3/4 f2 # INFO  [2024-12-02 10:11:45.251] Step 4/4 f3 # INFO  [2024-12-02 10:11:45.253] Finished execution of steps. # INFO  [2024-12-02 10:11:45.253] Done. pip #      step depends    out keepOut  group  state #    <char>  <list> <list>  <lgcl> <char> <char> # 1:   data              1   FALSE   data   Done # 2:     f1    data      2   FALSE     f1   Done # 3:     f2      f1      4   FALSE     f2   Done # 4:     f3      f2      7   FALSE     f3   Done pip$set_data(10)$run() # INFO  [2024-12-02 10:11:45.313] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:45.314] Step 1/4 data # INFO  [2024-12-02 10:11:45.316] Step 2/4 f1 # INFO  [2024-12-02 10:11:45.319] Step 3/4 f2 # INFO  [2024-12-02 10:11:45.324] Step 4/4 f3 # INFO  [2024-12-02 10:11:45.325] Finished execution of steps. # INFO  [2024-12-02 10:11:45.326] Done. pip #      step depends    out keepOut  group  state #    <char>  <list> <list>  <lgcl> <char> <char> # 1:   data             10   FALSE   data   Done # 2:     f1    data     11   FALSE     f1   Done # 3:     f2      f1     13   FALSE     f2   Done # 4:     f3      f1      8   FALSE     f3   Done"},{"path":"https://github.com/rpahl/pipeflow/articles/self-modify-pipeline.html","id":"insert-and-remove-steps","dir":"Articles","previous_headings":"Changing the pipeline structure at runtime","what":"Insert and remove steps","title":"Advanced: How pipelines can modify themselves at runtime","text":"last example, instead just replacing, go bit insert remove steps. pipeline definition follows: Basically, input greater 10, insert two new steps f1, remove f2, replace f3 new step adds 30 input. Also note return pipeline object case. important, pipeline’s run function argument recursive, default set TRUE means step returns pipeline, run current pipeline aborted returned pipeline re-run. Let’s see pipeline structure running . now let’s run input 10. log output shows abort re-run pipeline. Let’s see final structure step outputs. final structure expected new steps inserted old step removed. mentioned , just simple example show possibilities. leave user come sensible complex use cases.","code":"pip <- pipe_new(         \"my-pipeline\"     ) |>      pipe_add(         \"f1\",         function(x = ~data) {             x + 1         }     ) |>      pipe_add(         \"f2\",         function(x = ~f1, .self = NULL)         {             if (x > 10 && !is.null(.self)) {                 .self$insert_after(                     afterStep = \"f1\",                     step = \"f2a\",                     function(x = ~f1) {                         x + 21                     }                 )                 .self$insert_after(                     afterStep = \"f2a\",                     step = \"f2b\",                     function(x = ~f2a) {                         x + 22                     }                 )                 .self$replace_step(                     \"f3\",                     function(x = ~f2b) {                         x + 30                     }                 )                 .self$remove_step(\"f2\")                 return(.self)             }             x + 2         }     ) |>      pipe_add(         \"f3\",         function(x = ~f2) {             x + 3         }     ) pip #      step depends    out keepOut  group  state #    <char>  <list> <list>  <lgcl> <char> <char> # 1:   data         [NULL]   FALSE   data    New # 2:     f1    data [NULL]   FALSE     f1    New # 3:     f2      f1 [NULL]   FALSE     f2    New # 4:     f3      f2 [NULL]   FALSE     f3    New pip$set_params(list(.self = pip)) pip$set_data(10)$run() # INFO  [2024-12-02 10:11:45.499] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:45.500] Step 1/4 data # INFO  [2024-12-02 10:11:45.502] Step 2/4 f1 # INFO  [2024-12-02 10:11:45.505] Step 3/4 f2 # INFO  [2024-12-02 10:11:45.518] Abort pipeline execution and restart on new. # INFO  [2024-12-02 10:11:45.518] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:45.519] Step 1/5 data - skip 'done' step # INFO  [2024-12-02 10:11:45.520] Step 2/5 f1 - skip 'done' step # INFO  [2024-12-02 10:11:45.521] Step 3/5 f2a # INFO  [2024-12-02 10:11:45.526] Step 4/5 f2b # INFO  [2024-12-02 10:11:45.528] Step 5/5 f3 # INFO  [2024-12-02 10:11:45.529] Finished execution of steps. # INFO  [2024-12-02 10:11:45.530] Done. pip #      step depends    out keepOut  group  state #    <char>  <list> <list>  <lgcl> <char> <char> # 1:   data             10   FALSE   data   Done # 2:     f1    data     11   FALSE     f1   Done # 3:    f2a      f1     32   FALSE    f2a   Done # 4:    f2b     f2a     54   FALSE    f2b   Done # 5:     f3     f2b     84   FALSE     f3   Done"},{"path":"https://github.com/rpahl/pipeflow/articles/split-and-combine.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Advanced: How to use pipeflow with split data sets","text":"common scenario split data set subsets apply analysis part. context pipelines, means like apply pipeline multiple times data subset. additon, may want combine parts individual output. see, pipeflow provides built-function handle scenario.","code":""},{"path":"https://github.com/rpahl/pipeflow/articles/split-and-combine.html","id":"define-pipeline","dir":"Articles","previous_headings":"","what":"Define pipeline","title":"Advanced: How to use pipeflow with split data sets","text":"Let’s first define pipeline, , keep matters simple, just fits linear model outputs model coefficients. pipeline looks like : graphically: use iris data set working example. First, apply pipeline whole data set.","code":"library(pipeflow)  pip <- pipe_new(         \"my-pipeline\"     ) |>      pipe_add(         \"fit\",         function(             data = ~data,             xVar = \"x\",             yVar = \"y\"         ) {             lm(paste(yVar, \"~\", xVar), data = data)         }     ) |>      pipe_add(         \"coefs\",         function(             fit = ~fit         ) {             coefficients(fit)         },         keepOut = TRUE     ) pip #      step depends    out keepOut  group  state #    <char>  <list> <list>  <lgcl> <char> <char> # 1:   data         [NULL]   FALSE   data    New # 2:    fit    data [NULL]   FALSE    fit    New # 3:  coefs     fit [NULL]    TRUE  coefs    New library(visNetwork) do.call(visNetwork, args = c(pip$get_graph(), list(height = 100))) |>     visHierarchicalLayout(direction = \"LR\") head(iris) #   Sepal.Length Sepal.Width Petal.Length Petal.Width Species # 1          5.1         3.5          1.4         0.2  setosa # 2          4.9         3.0          1.4         0.2  setosa # 3          4.7         3.2          1.3         0.2  setosa # 4          4.6         3.1          1.5         0.2  setosa # 5          5.0         3.6          1.4         0.2  setosa # 6          5.4         3.9          1.7         0.4  setosa pip$set_data(iris) pip$set_params(list(xVar = \"Sepal.Length\", yVar = \"Sepal.Width\")) pip$run() # INFO  [2024-12-02 10:11:48.710] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:48.736] Step 1/3 data # INFO  [2024-12-02 10:11:48.748] Step 2/3 fit # INFO  [2024-12-02 10:11:48.767] Step 3/3 coefs # INFO  [2024-12-02 10:11:48.769] Finished execution of steps. # INFO  [2024-12-02 10:11:48.769] Done. pip$collect_out() # $coefs #  (Intercept) Sepal.Length  #    3.4189468   -0.0618848"},{"path":"https://github.com/rpahl/pipeflow/articles/split-and-combine.html","id":"split-data-set","dir":"Articles","previous_headings":"","what":"Split data set","title":"Advanced: How to use pipeflow with split data sets","text":"Next, want apply pipeline species separately. One way use R’s split function. can split Species column run pipeline subset. example: Unfortunately, approach create additional code run outside pipeline framework. Let’s now see handle scenario within pipeline framework. reminder, pipeline looks like : deal split data sets, use built-function set_data_split. function actually transforms pipeline: can see, pipeline now replicated data subset. Note set_data_split accepts list data frames, just output split. Now let’s run pipeline. can see, output now obtained without need write additional code outside pipeline framework. Finally, side note another built-function named split, can used split pipeline independent parts. works pipeline, working example, naturally split pipeline parts defined data split. function especially useful want separate parts pipeline code order run parallel.","code":"run_pipeline <- function(data) {     pip$set_data(data)     pip$run()     pip$collect_out() }  results <- lapply(split(iris, iris$Species), FUN = run_pipeline) # INFO  [2024-12-02 10:11:48.906] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:48.907] Step 1/3 data # INFO  [2024-12-02 10:11:48.909] Step 2/3 fit # INFO  [2024-12-02 10:11:48.913] Step 3/3 coefs # INFO  [2024-12-02 10:11:48.918] Finished execution of steps. # INFO  [2024-12-02 10:11:48.918] Done. # INFO  [2024-12-02 10:11:48.936] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:48.937] Step 1/3 data # INFO  [2024-12-02 10:11:48.939] Step 2/3 fit # INFO  [2024-12-02 10:11:48.942] Step 3/3 coefs # INFO  [2024-12-02 10:11:48.943] Finished execution of steps. # INFO  [2024-12-02 10:11:48.944] Done. # INFO  [2024-12-02 10:11:48.946] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:48.947] Step 1/3 data # INFO  [2024-12-02 10:11:48.949] Step 2/3 fit # INFO  [2024-12-02 10:11:48.951] Step 3/3 coefs # INFO  [2024-12-02 10:11:48.953] Finished execution of steps. # INFO  [2024-12-02 10:11:48.953] Done. results # $setosa # $setosa$coefs #  (Intercept) Sepal.Length  #   -0.5694327    0.7985283  #  #  # $versicolor # $versicolor$coefs #  (Intercept) Sepal.Length  #    0.8721460    0.3197193  #  #  # $virginica # $virginica$coefs #  (Intercept) Sepal.Length  #    1.4463054    0.2318905 pip #      step depends                 out keepOut  group  state #    <char>  <list>              <list>  <lgcl> <char> <char> # 1:   data          <data.frame[50x5]>   FALSE   data   Done # 2:    fit    data            <lm[12]>   FALSE    fit   Done # 3:  coefs     fit 1.4463054,0.2318905    TRUE  coefs   Done splitData <- split(iris, iris$Species) pip$set_data_split(splitData) pip #                step         depends                 out keepOut      group    state #              <char>          <list>              <list>  <lgcl>     <char>   <char> # 1:      data.setosa                              [NULL]   FALSE     setosa      New # 2:       fit.setosa     data.setosa            <lm[12]>   FALSE     setosa Outdated # 3:     coefs.setosa      fit.setosa 1.4463054,0.2318905    TRUE     setosa Outdated # 4:  data.versicolor                              [NULL]   FALSE versicolor      New # 5:   fit.versicolor data.versicolor            <lm[12]>   FALSE versicolor Outdated # 6: coefs.versicolor  fit.versicolor 1.4463054,0.2318905    TRUE versicolor Outdated # 7:   data.virginica                              [NULL]   FALSE  virginica      New # 8:    fit.virginica  data.virginica            <lm[12]>   FALSE  virginica Outdated # 9:  coefs.virginica   fit.virginica 1.4463054,0.2318905    TRUE  virginica Outdated do.call(visNetwork, args = pip$get_graph()) |>     visHierarchicalLayout(direction = \"LR\", sortMethod = \"directed\") pip$run() # INFO  [2024-12-02 10:11:49.425] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:49.426] Step 1/9 data.setosa # INFO  [2024-12-02 10:11:49.428] Step 2/9 fit.setosa # INFO  [2024-12-02 10:11:49.431] Step 3/9 coefs.setosa # INFO  [2024-12-02 10:11:49.432] Step 4/9 data.versicolor # INFO  [2024-12-02 10:11:49.434] Step 5/9 fit.versicolor # INFO  [2024-12-02 10:11:49.437] Step 6/9 coefs.versicolor # INFO  [2024-12-02 10:11:49.439] Step 7/9 data.virginica # INFO  [2024-12-02 10:11:49.441] Step 8/9 fit.virginica # INFO  [2024-12-02 10:11:49.443] Step 9/9 coefs.virginica # INFO  [2024-12-02 10:11:49.444] Finished execution of steps. # INFO  [2024-12-02 10:11:49.445] Done. pip$collect_out() # $setosa #  (Intercept) Sepal.Length  #   -0.5694327    0.7985283  #  # $versicolor #  (Intercept) Sepal.Length  #    0.8721460    0.3197193  #  # $virginica #  (Intercept) Sepal.Length  #    1.4463054    0.2318905 pip$split() # [[1]] #            step     depends                   out keepOut  group  state #          <char>      <list>                <list>  <lgcl> <char> <char> # 1:  data.setosa                <data.frame[50x5]>   FALSE setosa   Done # 2:   fit.setosa data.setosa              <lm[12]>   FALSE setosa   Done # 3: coefs.setosa  fit.setosa -0.5694327, 0.7985283    TRUE setosa   Done #  # [[2]] #                step         depends                 out keepOut      group  state #              <char>          <list>              <list>  <lgcl>     <char> <char> # 1:  data.versicolor                  <data.frame[50x5]>   FALSE versicolor   Done # 2:   fit.versicolor data.versicolor            <lm[12]>   FALSE versicolor   Done # 3: coefs.versicolor  fit.versicolor 0.8721460,0.3197193    TRUE versicolor   Done #  # [[3]] #               step        depends                 out keepOut     group  state #             <char>         <list>              <list>  <lgcl>    <char> <char> # 1:  data.virginica                 <data.frame[50x5]>   FALSE virginica   Done # 2:   fit.virginica data.virginica            <lm[12]>   FALSE virginica   Done # 3: coefs.virginica  fit.virginica 1.4463054,0.2318905    TRUE virginica   Done"},{"path":"https://github.com/rpahl/pipeflow/articles/split-and-combine.html","id":"combine-output","dir":"Articles","previous_headings":"","what":"Combine output","title":"Advanced: How to use pipeflow with split data sets","text":"cases, may want (re-)combine output pipeline parts. example, may want combine coefficients linear models one table. Let’s matter extend pipeline one step end. pipeline looks now. Next want apply set_data_split function, basically need make sure pipeline split except last step combines everything. achieve using toStep parameter, basically tells pipeline split certain step. see last step replicated data subset now contains list dependencies, namely: Graphically becomes even clear: Finally, let’s see plays run pipeline.","code":"pip <- pipe_new(         \"my-pipeline\"     ) |>      pipe_add(         \"fit\",         function(             data = ~data,             xVar = \"x\",             yVar = \"y\"         ) {             lm(paste(yVar, \"~\", xVar), data = data)         }     ) |>      pipe_add(         \"coefs\",         function(             fit = ~fit         ) {             coefficients(fit)         }     )  |>      pipe_add(         \"combine_coefs\",         function(             coefs = ~coefs         ) {             coefs |> do.call(rbind, args = _) |> as.data.frame()         },         keepOut = TRUE     ) pip #             step depends    out keepOut         group  state #           <char>  <list> <list>  <lgcl>        <char> <char> # 1:          data         [NULL]   FALSE          data    New # 2:           fit    data [NULL]   FALSE           fit    New # 3:         coefs     fit [NULL]   FALSE         coefs    New # 4: combine_coefs   coefs [NULL]    TRUE combine_coefs    New pip$set_data_split(split(iris, iris$Species), toStep = \"coefs\") pip #                 step         depends    out keepOut         group    state #               <char>          <list> <list>  <lgcl>        <char>   <char> #  1:      data.setosa                 [NULL]   FALSE        setosa      New #  2:       fit.setosa     data.setosa [NULL]   FALSE        setosa Outdated #  3:     coefs.setosa      fit.setosa [NULL]   FALSE        setosa Outdated #  4:  data.versicolor                 [NULL]   FALSE    versicolor      New #  5:   fit.versicolor data.versicolor [NULL]   FALSE    versicolor Outdated #  6: coefs.versicolor  fit.versicolor [NULL]   FALSE    versicolor Outdated #  7:   data.virginica                 [NULL]   FALSE     virginica      New #  8:    fit.virginica  data.virginica [NULL]   FALSE     virginica Outdated #  9:  coefs.virginica   fit.virginica [NULL]   FALSE     virginica Outdated # 10:    combine_coefs       <list[1]> [NULL]    TRUE combine_coefs      New pip$get_depends()[[\"combine_coefs\"]] # $coefs # [1] \"coefs.setosa\"     \"coefs.versicolor\" \"coefs.virginica\" do.call(visNetwork, args = pip$get_graph()) |>     visHierarchicalLayout(direction = \"LR\", sortMethod = \"directed\") pip$set_params(list(xVar = \"Sepal.Length\", yVar = \"Sepal.Width\")) pip$run() # INFO  [2024-12-02 10:11:49.944] Start run of 'my-pipeline' pipeline: # INFO  [2024-12-02 10:11:49.945] Step 1/10 data.setosa # INFO  [2024-12-02 10:11:49.947] Step 2/10 fit.setosa # INFO  [2024-12-02 10:11:49.950] Step 3/10 coefs.setosa # INFO  [2024-12-02 10:11:49.952] Step 4/10 data.versicolor # INFO  [2024-12-02 10:11:49.954] Step 5/10 fit.versicolor # INFO  [2024-12-02 10:11:49.957] Step 6/10 coefs.versicolor # INFO  [2024-12-02 10:11:49.959] Step 7/10 data.virginica # INFO  [2024-12-02 10:11:49.961] Step 8/10 fit.virginica # INFO  [2024-12-02 10:11:49.964] Step 9/10 coefs.virginica # INFO  [2024-12-02 10:11:49.966] Step 10/10 combine_coefs # INFO  [2024-12-02 10:11:49.968] Finished execution of steps. # INFO  [2024-12-02 10:11:49.968] Done. pip$collect_out() # $combine_coefs #                  (Intercept) Sepal.Length # coefs.setosa      -0.5694327    0.7985283 # coefs.versicolor   0.8721460    0.3197193 # coefs.virginica    1.4463054    0.2318905"},{"path":"https://github.com/rpahl/pipeflow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Roman Pahl. Author, maintainer.","code":""},{"path":"https://github.com/rpahl/pipeflow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pahl R (2024). pipeflow: Implement Data Analysis Workflows Pipelines. R package version 0.1.2, https://github.com/rpahl/pipeflow, https://rpahl.github.io/pipeflow.","code":"@Manual{,   title = {pipeflow: Implement Data Analysis Workflows with Pipelines},   author = {Roman Pahl},   year = {2024},   note = {R package version 0.1.2, https://github.com/rpahl/pipeflow},   url = {https://rpahl.github.io/pipeflow}, }"},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"pipeflow-","dir":"","previous_headings":"","what":"Implement Data Analysis Workflows with Pipelines","title":"Implement Data Analysis Workflows with Pipelines","text":"lightweight yet powerful framework building robust data analysis pipelines. pipeflow, initialize pipeline dataset construct workflow step step seamlessly adding R functions. Modify, remove, insert steps stage pipeflow ensures integrity correctness pipeline. Designed help focus rather , package simplifies implementation complex workflows, making even large-scale data analysis projects manageable, adaptable, reusable time.","code":""},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"why-use-pipeflow","dir":"","previous_headings":"","what":"Why use pipeflow","title":"Implement Data Analysis Workflows with Pipelines","text":"Easy learn yet powerful complex workflows Automatically manages function dependencies Promotes standardized, reproducible analysis Simplifies error handling, debugging, reusability","code":""},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features","title":"Implement Data Analysis Workflows with Pipelines","text":"Flexible Application: Use interactively programmatically R Dependency Management: Dependencies checked definition, ensuring reliable workflows Comprehensive Logging: Logs step, customizable logger options Parameter Control: Easily view adjust function parameters one place Modular Composition: Modify, extend, combine pipelines effortlessly Intelligent Execution: Skip steps already --date, similar make Visualization: View pipelines tabular graphical formats","code":""},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"advanced-features","dir":"","previous_headings":"","what":"Advanced features","title":"Implement Data Analysis Workflows with Pipelines","text":"Dynamic Branching: Apply pipeline multiple datasets seamlessly Self-Modifying: Pipelines can adapt modify runtime","code":""},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Implement Data Analysis Workflows with Pipelines","text":"","code":"# Install release version from CRAN install.packages(\"pipeflow\")  # Install development version from GitHub devtools::install_github(\"rpahl/pipeflow\")"},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Implement Data Analysis Workflows with Pipelines","text":"","code":"library(pipeflow)"},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Implement Data Analysis Workflows with Pipelines","text":"recommended read vignettes order listed : Get started pipeflow Modifying existing pipelines Combining pipelines Collecting output","code":""},{"path":"https://github.com/rpahl/pipeflow/index.html","id":"advanced-topics","dir":"","previous_headings":"","what":"Advanced topics","title":"Implement Data Analysis Workflows with Pipelines","text":"use pipeflow split data sets pipelines can modify runtime","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipeline Class — Pipeline","title":"Pipeline Class — Pipeline","text":"class implements analysis pipeline. pipeline consists sequence analysis steps, can added one one. added step may may depend one previous steps. pipeline keeps track dependencies among steps ensure dependencies met creation pipeline, , pipeline run. pipeline run, output stored pipeline along step can accessed later. Different pipelines can bound together preserving dependencies within pipeline.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pipeline Class — Pipeline","text":"Roman Pahl","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Pipeline Class — Pipeline","text":"name string name pipeline pipeline data.table pipeline row represents one step.","code":""},{"path":[]},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Pipeline Class — Pipeline","text":"Pipeline$new() Pipeline$add() Pipeline$append() Pipeline$append_to_step_names() Pipeline$collect_out() Pipeline$discard_steps() Pipeline$get_data() Pipeline$get_depends() Pipeline$get_depends_down() Pipeline$get_depends_up() Pipeline$get_graph() Pipeline$get_out() Pipeline$get_params() Pipeline$get_params_at_step() Pipeline$get_params_unique() Pipeline$get_params_unique_json() Pipeline$get_step() Pipeline$get_step_names() Pipeline$get_step_number() Pipeline$has_step() Pipeline$insert_after() Pipeline$insert_before() Pipeline$length() Pipeline$lock_step() Pipeline$print() Pipeline$pop_step() Pipeline$pop_steps_after() Pipeline$pop_steps_from() Pipeline$remove_step() Pipeline$rename_step() Pipeline$replace_step() Pipeline$reset() Pipeline$run() Pipeline$run_step() Pipeline$set_data() Pipeline$set_data_split() Pipeline$set_keep_out() Pipeline$set_params() Pipeline$set_params_at_step() Pipeline$split() Pipeline$unlock_step() Pipeline$clone()","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Pipeline Class — Pipeline","text":"constructor","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$new(name, data = NULL, logger = NULL)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"name name Pipeline data optional data used start pipeline. data also can set later using set_data function. logger custom logger used logging. logger provided, default logger used, sufficient use cases. want use custom log function, need provide function obeys following form: function(level, msg, ...) { custom logging code } level argument string one info, warn, error. msg argument string containing message logged. ... argument list named parameters, can used add additional information log message. Currently, used add context case step giving warning error. Note default logger, log layout can altered time via set_log_layout().","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"myPipe\", data = data.frame(x = 1:8)) p  # Passing custom logger my_logger <- function(level, msg, ...) {    cat(level, msg, \"\\n\") } p <- Pipeline$new(\"myPipe\", logger = my_logger)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"Pipeline Class — Pipeline","text":"Add pipeline step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$add(   step,   fun,   params = list(),   description = \"\",   group = step,   keepOut = FALSE )"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step. step name must unique. fun function name function applied step. existing lambda/anonymous functions can used. params list list parameters set overwrite parameters passed function. description string optional description step group string output collected pipeline execution (see function collect_out) grouped defined group names. default, name step, comes handy pipeline copy-appended multiple times keep results function/step grouped one place. keepOut logical FALSE (default) output step collected calling collect_out pipeline run. option used keep results matter skip intermediate results needed. See also function collect_out details.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"# Add steps with lambda functions p <- Pipeline$new(\"myPipe\", data = 1) p$add(\"s1\", \\(x = ~data) 2*x)  # use input data p$add(\"s2\", \\(x = ~data, y = ~s1) x * y) try(p$add(\"s2\", \\(z = 3) 3)) # error: step 's2' exists already try(p$add(\"s3\", \\(z = ~foo) 3)) # dependency 'foo' not found p  p <- Pipeline$new(\"myPipe\", data = c(1, 2, NA, 3, 4)) p$add(\"calc_mean\", mean, params = list(x = ~data, na.rm = TRUE)) p$run()$get_out(\"calc_mean\")  p <- Pipeline$new(\"myPipe\", data = 1:10) p$add(\"s1\", \\(x = ~data) 2*x, description = \"multiply by 2\") print(p) print(p, verbose = TRUE) # print all columns  p <- Pipeline$new(\"myPipe\", data = data.frame(x = 1:5, y = 1:5)) p$add(\"prep_x\", \\(data = ~data) data$x, group = \"prep\") p$add(\"prep_y\", \\(data = ~data) (data$y)^2, group = \"prep\") p$add(\"sum\", \\(x = ~prep_x, y = ~prep_y) x + y) p$run()$collect_out(all = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-append-","dir":"Reference","previous_headings":"","what":"Method append()","title":"Pipeline Class — Pipeline","text":"Append another pipeline. append takes care name clashes dependencies, changed append.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$append(p, outAsIn = FALSE, tryAutofixNames = TRUE, sep = \".\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"p Pipeline object appended. outAsIn logical TRUE, output first pipeline used input second pipeline. tryAutofixNames logical TRUE, name clashes tried automatically resolved appending 2nd pipeline's name. sep string separator used auto-resolving step names","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns new combined Pipeline.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"# Append pipeline p1 <- Pipeline$new(\"pipe1\") p1$add(\"step1\", \\(x = 1) x) p2 <- Pipeline$new(\"pipe2\") p2$add(\"step2\", \\(y = 1) y) p1$append(p2)  p3 <- Pipeline$new(\"pipe3\") p3$add(\"step1\", \\(z = 1) z) p1$append(p2)$append(p3)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-append-to-step-names-","dir":"Reference","previous_headings":"","what":"Method append_to_step_names()","title":"Pipeline Class — Pipeline","text":"Append string step names. Also takes care updating dependencies accordingly.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$append_to_step_names(postfix, sep = \".\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"postfix string appended step name. sep string separator step name postfix.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\") p$add(\"step1\", \\(x = 1) x) p$add(\"step2\", \\(y = 1) y) p$append_to_step_names(\"new\") p p$append_to_step_names(\"new\", sep = \"_\") p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-collect-out-","dir":"Reference","previous_headings":"","what":"Method collect_out()","title":"Pipeline Class — Pipeline","text":"Collect output afer pipeline run, default, steps keepOut set TRUE. output grouped group names (see group parameter function add) set explicitly corresponds step names.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$collect_out(groupBy = \"group\", all = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"groupBy string column pipeline group output. logical TRUE output collected regardless keepOut flag. can useful debugging.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list containing output, named groups, , default, steps.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"step1\", \\(x = ~data) x + 2) p$add(\"step2\", \\(x = ~step1) x + 2, keepOut = TRUE) p$run() p$collect_out() p$collect_out(all = TRUE) |> str()  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"step1\", \\(x = ~data) x + 2, group = \"add\") p$add(\"step2\", \\(x = ~step1, y = 2) x + y, group = \"add\") p$add(\"step3\", \\(x = ~data) x * 3, group = \"mult\") p$add(\"step4\", \\(x = ~data, y = 2) x * y, group = \"mult\") p p$run() p$collect_out(all = TRUE) |> str()  # Grouped by state p$set_params(list(y = 5)) p p$collect_out(groupBy = \"state\", all = TRUE) |> str()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-discard-steps-","dir":"Reference","previous_headings":"","what":"Method discard_steps()","title":"Pipeline Class — Pipeline","text":"Discard steps match given pattern.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$discard_steps(pattern, recursive = FALSE, fixed = TRUE, ...)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"pattern string containing regular expression (character string fixed = TRUE) matched. recursive logical TRUE step removed together downstream dependencies. fixed logical TRUE, pattern string matched . Overrides conflicting arguments. ... arguments passed grep().","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~add1) x + 2) p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p$discard_steps(\"mult\") p  # Re-add steps p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p # Discard step 'add1' does'nt work as 'add2' and 'mult3' depend on it try(p$discard_steps(\"add1\")) p$discard_steps(\"add1\", recursive = TRUE)   # this works p  # Trying to discard non-existent steps is just ignored p$discard_steps(\"non-existent\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-data-","dir":"Reference","previous_headings":"","what":"Method get_data()","title":"Pipeline Class — Pipeline","text":"Get data","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_data()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"output defined data step, default first step pipeline","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$get_data() p$set_data(3:4) p$get_data()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-depends-","dir":"Reference","previous_headings":"","what":"Method get_depends()","title":"Pipeline Class — Pipeline","text":"Get dependencies defined pipeline","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_depends()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"named list dependencies step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$get_depends()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-depends-down-","dir":"Reference","previous_headings":"","what":"Method get_depends_down()","title":"Pipeline Class — Pipeline","text":"Get downstream dependencies given step, default descending recursively.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_depends_down(step, recursive = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step recursive logical TRUE, dependencies dependencies also returned.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list downstream dependencies","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p$get_depends_down(\"add1\") p$get_depends_down(\"add1\", recursive = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-depends-up-","dir":"Reference","previous_headings":"","what":"Method get_depends_up()","title":"Pipeline Class — Pipeline","text":"Get upstream dependencies given step, default descending recursively.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_depends_up(step, recursive = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step recursive logical TRUE, dependencies dependencies also returned.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list upstream dependencies","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p$get_depends_up(\"mult4\") p$get_depends_up(\"mult4\", recursive = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-graph-","dir":"Reference","previous_headings":"","what":"Method get_graph()","title":"Pipeline Class — Pipeline","text":"Visualize pipeline graph.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_graph(groups = NULL)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"groups character NULL, steps belonging given groups considered.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"two data frames, one nodes one edges ready used visNetwork package.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = ~add1) x + y) p$add(\"mult1\", \\(x = ~add1, y = ~add2) x * y) if (require(\"visNetwork\", quietly = TRUE)) {     do.call(visNetwork, args = p$get_graph()) }"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-out-","dir":"Reference","previous_headings":"","what":"Method get_out()","title":"Pipeline Class — Pipeline","text":"Get output given step pipeline run.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_out(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"output given step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$run() p$get_out(\"add1\") p$get_out(\"add2\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-params-","dir":"Reference","previous_headings":"","what":"Method get_params()","title":"Pipeline Class — Pipeline","text":"Get unbound (.e. referring steps) function parameters defined pipeline.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_params(ignoreHidden = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"ignoreHidden logical TRUE, hidden parameters (.e. names starting dot) ignored thus returned.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list parameters, sorted named step. Steps parameters filtered .","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"add3\", \\() 1 + 2) p$get_params() |> str() p$get_params(ignoreHidden = FALSE) |> str()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-params-at-step-","dir":"Reference","previous_headings":"","what":"Method get_params_at_step()","title":"Pipeline Class — Pipeline","text":"Get unbound (.e. referring steps) given step name.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_params_at_step(step, ignoreHidden = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step ignoreHidden logical TRUE, hidden parameters (.e. names starting dot) ignored thus returned.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list parameters defined given step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-13","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"add3\", \\() 1 + 2) p$get_params_at_step(\"add2\") p$get_params_at_step(\"add2\", ignoreHidden = FALSE) p$get_params_at_step(\"add3\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-params-unique-","dir":"Reference","previous_headings":"","what":"Method get_params_unique()","title":"Pipeline Class — Pipeline","text":"Get unbound (.e. referring steps) parameters defined pipeline, list parameter . values parameters, values first step parameter defined. particularly useful parameters set using set_params function, set value steps.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_params_unique(ignoreHidden = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"ignoreHidden logical TRUE, hidden parameters (.e. names starting dot) ignored thus returned.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list unique parameters","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-14","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"mult1\", \\(x = 1, y = 2, .z = 3, b = ~add2) x * y * b) p$get_params_unique() p$get_params_unique(ignoreHidden = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-params-unique-json-","dir":"Reference","previous_headings":"","what":"Method get_params_unique_json()","title":"Pipeline Class — Pipeline","text":"Get unique function parameters json format.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_params_unique_json(ignoreHidden = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"ignoreHidden logical TRUE, hidden parameters (.e. names starting dot) ignored thus returned.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list flat unnamed json list unique function parameters","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-15","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"mult1\", \\(x = 1, y = 2, .z = 3, b = ~add2) x * y * b) p$get_params_unique_json() p$get_params_unique_json(ignoreHidden = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-step-","dir":"Reference","previous_headings":"","what":"Method get_step()","title":"Pipeline Class — Pipeline","text":"Get step pipeline","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_step(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"data.table row containing step. step found, error given.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-16","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, z = ~add1) x + y + z) p$run() add1 <- p$get_step(\"add1\") print(add1) add1[[\"params\"]] add1[[\"out\"]] try() try(p$get_step(\"foo\")) # error: step 'foo' does not exist"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-step-names-","dir":"Reference","previous_headings":"","what":"Method get_step_names()","title":"Pipeline Class — Pipeline","text":"Get step names pipeline","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_step_names()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"character vector step names","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-17","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$get_step_names()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-get-step-number-","dir":"Reference","previous_headings":"","what":"Method get_step_number()","title":"Pipeline Class — Pipeline","text":"Get step number","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$get_step_number(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"step number pipeline","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-18","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$get_step_number(\"f2\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-has-step-","dir":"Reference","previous_headings":"","what":"Method has_step()","title":"Pipeline Class — Pipeline","text":"Determine whether pipeline given step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$has_step(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"logical whether step exists","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-19","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$has_step(\"f2\") p$has_step(\"foo\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-insert-after-","dir":"Reference","previous_headings":"","what":"Method insert_after()","title":"Pipeline Class — Pipeline","text":"Insert step certain step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$insert_after(afterStep, step, ...)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"afterStep string name step insert step string name step insert ... arguments passed add method pipeline","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-20","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(x = ~f1) x) p$insert_after(\"f1\", \"f3\", \\(x = ~f1) x) p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-insert-before-","dir":"Reference","previous_headings":"","what":"Method insert_before()","title":"Pipeline Class — Pipeline","text":"Insert step certain step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$insert_before(beforeStep, step, ...)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"beforeStep string name step insert step string name step insert ... arguments passed add method pipeline","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-21","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(x = ~f1) x) p$insert_before(\"f2\", \"f3\", \\(x = ~f1) x) p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-length-","dir":"Reference","previous_headings":"","what":"Method length()","title":"Pipeline Class — Pipeline","text":"Length pipeline aka number pipeline steps.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$length()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"numeric length pipeline.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-22","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$length()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-lock-step-","dir":"Reference","previous_headings":"","what":"Method lock_step()","title":"Pipeline Class — Pipeline","text":"Locking step means parameters output (given output) locked. output, parameters locked. Locking step useful step happens share parameter names steps affected parameters set commonly entire pipeline (see function set_params ).","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$lock_step(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-23","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = 1, data = ~data) x + data) p$add(\"add2\", \\(x = 1, data = ~data) x + data) p$run() p$get_out(\"add1\") p$get_out(\"add2\") p$lock_step(\"add1\")  p$set_data(3) p$set_params(list(x = 3)) p$run() p$get_out(\"add1\") p$get_out(\"add2\")"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Pipeline Class — Pipeline","text":"Print pipeline table.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$print(verbose = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"verbose logical TRUE, print columns pipeline, otherwise subset columns printed.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-24","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$print()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-pop-step-","dir":"Reference","previous_headings":"","what":"Method pop_step()","title":"Pipeline Class — Pipeline","text":"Remove last step pipeline.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$pop_step()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"string name step removed","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-25","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p p$pop_step() # \"f2\" p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-pop-steps-after-","dir":"Reference","previous_headings":"","what":"Method pop_steps_after()","title":"Pipeline Class — Pipeline","text":"Remove steps given step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$pop_steps_after(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-26","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"character vector steps removed.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-26","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$add(\"f3\", \\(z = 1) z) p$pop_steps_after(\"f1\")  # \"f2\", \"f3\" p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-pop-steps-from-","dir":"Reference","previous_headings":"","what":"Method pop_steps_from()","title":"Pipeline Class — Pipeline","text":"Remove steps including given step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$pop_steps_from(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-27","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"character vector steps removed.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-27","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$add(\"f3\", \\(z = 1) z) p$pop_steps_from(\"f2\")  # \"f2\", \"f3\" p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-remove-step-","dir":"Reference","previous_headings":"","what":"Method remove_step()","title":"Pipeline Class — Pipeline","text":"Remove certain step pipeline. step exist, error given. steps depend step removed, error given, unless recursive = TRUE.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$remove_step(step, recursive = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step removed. recursive logical TRUE step removed together downstream dependencies.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-28","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-28","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = ~add1) x + y) p$add(\"mult1\", \\(x = 1, y = ~add2) x * y) p$remove_step(\"mult1\") p try(p$remove_step(\"add1\"))  # fails because \"add2\" depends on \"add1\" p$remove_step(\"add1\", recursive = TRUE)  # removes \"add1\" and \"add2\" p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-rename-step-","dir":"Reference","previous_headings":"","what":"Method rename_step()","title":"Pipeline Class — Pipeline","text":"Safely rename step pipeline. new step name result name clash, error given.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$rename_step(from, to)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"string name step renamed. string new name step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-29","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-29","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = ~add1) x + y) p try(p$rename_step(\"add1\", \"add2\"))  # fails because \"add2\" exists p$rename_step(\"add1\", \"first_add\")  # Ok p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-replace-step-","dir":"Reference","previous_headings":"","what":"Method replace_step()","title":"Pipeline Class — Pipeline","text":"Replace pipeline step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$replace_step(   step,   fun,   params = list(),   description = \"\",   group = step,   keepOut = FALSE )"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step replaced. Step must exist. fun string function operation applied step. existing lambda/anonymous functions can used. params list list parameters overwrite default parameters existing functions. description string optional description step group string grouping information (default name step. output collected later (see function collect_out default put together group names. , example, comes handy pipeline copy-appended multiple times keep results function/step one place. keepOut logical FALSE output function cleaned end whole pipeline execution. option used keep results matter.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-30","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-30","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~data, y = 2) x + y) p$add(\"mult\", \\(x = 1, y = 2) x * y, keepOut = TRUE) p$run()$collect_out() p$replace_step(\"mult\", \\(x = ~add1, y = ~add2) x * y, keepOut = TRUE) p$run()$collect_out() try(p$replace_step(\"foo\", \\(x = 1) x))   # step 'foo' does not exist"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Pipeline Class — Pipeline","text":"Resets pipeline state run. means output removed state steps reset 'New'.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$reset()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-31","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-31","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$run() p p$reset() p"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Pipeline Class — Pipeline","text":"Run new /outdated pipeline steps.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$run(   force = FALSE,   recursive = TRUE,   cleanUnkept = FALSE,   progress = NULL,   showLog = TRUE )"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"force logical TRUE steps run regardless whether outdated . recursive logical TRUE step returns new pipeline, run current pipeline aborted new pipeline run recursively. cleanUnkept logical TRUE output marked kept removed pipeline run. option can useful temporary results require lot memory. progress function parameter can used provide custom progress function form function(value, detail), show progress pipeline run step, value current step number detail name step. showLog logical steps logged pipeline run?","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-32","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-32","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"# Simple pipeline p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~add1, z = 2) x + z) p$add(\"final\", \\(x = ~add1, y = ~add2) x * y, keepOut = TRUE) p$run()$collect_out() p$set_params(list(z = 4))  # outdates steps add2 and final p p$run()$collect_out() p$run(cleanUnkept = TRUE)  # clean up temporary results p  # Recursive pipeline p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"new_pipe\", \\(x = ~add1) {     pp <- Pipeline$new(\"new_pipe\", data = x)     pp$add(\"add1\", \\(x = ~data) x + 1)     pp$add(\"add2\", \\(x = ~add1) x + 2, keepOut = TRUE)     } ) p$run()$collect_out()  # Run pipeline with progress bar p <- Pipeline$new(\"pipe\", data = 1) p$add(\"first step\", \\() Sys.sleep(1)) p$add(\"second step\", \\() Sys.sleep(1)) p$add(\"last step\", \\() Sys.sleep(1)) pb <- txtProgressBar(min = 1, max = p$length(), style = 3) fprogress <- function(value, detail) {    setTxtProgressBar(pb, value) } p$run(progress = fprogress, showLog = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-run-step-","dir":"Reference","previous_headings":"","what":"Method run_step()","title":"Pipeline Class — Pipeline","text":"Run given pipeline step possibly together upstream downstream dependencies.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$run_step(   step,   upstream = TRUE,   downstream = FALSE,   cleanUnkept = FALSE )"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step upstream logical TRUE, run dependent upstream steps first. downstream logical TRUE, run depdendent downstream afterwards. cleanUnkept logical TRUE output marked kept removed pipeline run. option can useful temporary results require lot memory.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-33","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-33","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~add1, z = 2) x + z) p$add(\"mult\", \\(x = ~add1, y = ~add2) x * y) p$run_step(\"add2\") p$run_step(\"add2\", downstream = TRUE) p$run_step(\"mult\", upstream = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-set-data-","dir":"Reference","previous_headings":"","what":"Method set_data()","title":"Pipeline Class — Pipeline","text":"Set data first step pipeline.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$set_data(data)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"data data.frame initial data set.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-34","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-34","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y, keepOut = TRUE) p$run()$collect_out() p$set_data(3) p$run()$collect_out()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-set-data-split-","dir":"Reference","previous_headings":"","what":"Method set_data_split()","title":"Pipeline Class — Pipeline","text":"Split-copy pipeline list data sets. sub-pipeline one data sets set input data. step names sub-pipelines original step names plus name data set.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-35","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$set_data_split(   dataList,   toStep = utils::tail(self$get_step_names(), 1),   groupBySplit = TRUE,   sep = \".\" )"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"dataList list data sets toStep string step name marking optional subset pipeline, data split applied . groupBySplit logical whether set step groups according data split. sep string separator used step name data set name creating new step names.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-35","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"new combined Pipeline sub-pipeline set one data sets.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-35","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"# Split by three data sets dataList <- list(a = 1, b = 2, c = 3) p <- Pipeline$new(\"pipe\") p$add(\"add1\", \\(x = ~data) x + 1, keepOut = TRUE) p$add(\"mult\", \\(x = ~data, y = ~add1) x * y, keepOut = TRUE) p3 <- p$set_data_split(dataList) p3 p3$run()$collect_out() |> str()  # Don't group output by split p <- Pipeline$new(\"pipe\") p$add(\"add1\", \\(x = ~data) x + 1, keepOut = TRUE) p$add(\"mult\", \\(x = ~data, y = ~add1) x * y, keepOut = TRUE) p3 <- p$set_data_split(dataList, groupBySplit = FALSE) p3 p3$run()$collect_out() |> str()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-set-keep-out-","dir":"Reference","previous_headings":"","what":"Method set_keep_out()","title":"Pipeline Class — Pipeline","text":"Change keepOut flag given pipeline step, determines whether output step collected calling collect_out() pipeline run.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-36","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$set_keep_out(step, keepOut = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-30","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step keepOut logical whether keep output step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-36","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-36","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y, keepOut = TRUE) p$add(\"add2\", \\(x = ~data, y = 2) x + y) p$add(\"mult\", \\(x = ~add1, y = ~add2) x * y) p$run()$collect_out() p$set_keep_out(\"add1\", keepOut = FALSE) p$set_keep_out(\"mult\", keepOut = TRUE) p$collect_out()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-set-params-","dir":"Reference","previous_headings":"","what":"Method set_params()","title":"Pipeline Class — Pipeline","text":"Set parameters pipeline. parameter occurs several steps, parameter set commonly steps.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-37","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$set_params(params, warnUndefined = TRUE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-31","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"params list parameters set warnUndefined logical whether give warning parameter defined pipeline.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-37","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-37","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~data, y = 1) x + y) p$add(\"mult\", \\(x = 1, z = 1) x * z) p$get_params() p$set_params(list(x = 3, y = 3)) p$get_params() p$set_params(list(x = 5, z = 3)) p$get_params() suppressWarnings(     p$set_params(list(foo = 3))  # warning: trying to set undefined )"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-set-params-at-step-","dir":"Reference","previous_headings":"","what":"Method set_params_at_step()","title":"Pipeline Class — Pipeline","text":"Set unbound parameter values given pipeline step.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-38","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$set_params_at_step(step, params)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-32","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step params list parameters set","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-38","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"returns Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-38","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1, z = 2) x + y) p$add(\"add2\", \\(x = ~data, y = 1, z = 2) x + y) p$set_params_at_step(\"add1\", list(y = 3, z = 3)) p$get_params() try(p$set_params_at_step(\"add1\", list(foo = 3))) # foo not defined"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-split-","dir":"Reference","previous_headings":"","what":"Method split()","title":"Pipeline Class — Pipeline","text":"Splits pipeline independent parts.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-39","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$split()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-39","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"list Pipeline objects","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-39","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"# Example for two independent calculation paths p <- Pipeline$new(\"pipe\", data = 1) p$add(\"f1\", \\(x = ~data) x) p$add(\"f2\", \\(x = 1) x) p$add(\"f3\", \\(x = ~f1) x) p$add(\"f4\", \\(x = ~f2) x) p$split()  # Example of split by three data sets dataList <- list(a = 1, b = 2, c = 3) p <- Pipeline$new(\"pipe\") p$add(\"add1\", \\(x = ~data) x + 1, keepOut = TRUE) p$add(\"mult\", \\(x = ~data, y = ~add1) x * y, keepOut = TRUE) pips <- p$set_data_split(dataList)$split()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-unlock-step-","dir":"Reference","previous_headings":"","what":"Method unlock_step()","title":"Pipeline Class — Pipeline","text":"Unlock previously locked step. step locked, command ignored.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-40","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$unlock_step(step)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-33","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"step string name step","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"returns-40","dir":"Reference","previous_headings":"","what":"Returns","title":"Pipeline Class — Pipeline","text":"Pipeline object invisibly","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"examples-40","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = 1, data = ~data) x + data) p$add(\"add2\", \\(x = 1, data = ~data) x + data) p$lock_step(\"add1\") p$set_params(list(x = 3)) p$get_params() p$unlock_step(\"add1\") p$set_params(list(x = 3)) p$get_params()"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Pipeline Class — Pipeline","text":"objects class cloneable method.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"usage-41","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline Class — Pipeline","text":"","code":"Pipeline$clone(deep = FALSE)"},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"arguments-34","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline Class — Pipeline","text":"deep Whether make deep clone.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/Pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline Class — Pipeline","text":"","code":"## ------------------------------------------------ ## Method `Pipeline$new` ## ------------------------------------------------  p <- Pipeline$new(\"myPipe\", data = data.frame(x = 1:8)) p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New  # Passing custom logger my_logger <- function(level, msg, ...) {    cat(level, msg, \"\\n\") } p <- Pipeline$new(\"myPipe\", logger = my_logger)  ## ------------------------------------------------ ## Method `Pipeline$add` ## ------------------------------------------------  # Add steps with lambda functions p <- Pipeline$new(\"myPipe\", data = 1) p$add(\"s1\", \\(x = ~data) 2*x)  # use input data p$add(\"s2\", \\(x = ~data, y = ~s1) x * y) try(p$add(\"s2\", \\(z = 3) 3)) # error: step 's2' exists already #> Error : step 's2' already exists try(p$add(\"s3\", \\(z = ~foo) 3)) # dependency 'foo' not found #> Error : step 's3': dependency 'foo' not found p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     s1    data [NULL]   FALSE     s1    New #> 3:     s2 data,s1 [NULL]   FALSE     s2    New  p <- Pipeline$new(\"myPipe\", data = c(1, 2, NA, 3, 4)) p$add(\"calc_mean\", mean, params = list(x = ~data, na.rm = TRUE)) p$run()$get_out(\"calc_mean\") #> INFO  [2024-12-02 10:11:12.425] Start run of 'myPipe' pipeline: #> INFO  [2024-12-02 10:11:12.458] Step 1/2 data #> INFO  [2024-12-02 10:11:12.469] Step 2/2 calc_mean #> INFO  [2024-12-02 10:11:12.490] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.491] Done. #> [1] 2.5  p <- Pipeline$new(\"myPipe\", data = 1:10) p$add(\"s1\", \\(x = ~data) 2*x, description = \"multiply by 2\") print(p) #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     s1    data [NULL]   FALSE     s1    New print(p, verbose = TRUE) # print all columns #>      step           fun funcName    params depends    out keepOut  group #>    <char>        <list>   <char>    <list>  <list> <list>  <lgcl> <char> #> 1:   data <function[1]> function <list[0]>         [NULL]   FALSE   data #> 2:     s1 <function[1]> function <list[1]>    data [NULL]   FALSE     s1 #>      description                time  state #>           <char>              <POSc> <char> #> 1:               2024-12-02 10:11:12    New #> 2: multiply by 2 2024-12-02 10:11:12    New  p <- Pipeline$new(\"myPipe\", data = data.frame(x = 1:5, y = 1:5)) p$add(\"prep_x\", \\(data = ~data) data$x, group = \"prep\") p$add(\"prep_y\", \\(data = ~data) (data$y)^2, group = \"prep\") p$add(\"sum\", \\(x = ~prep_x, y = ~prep_y) x + y) p$run()$collect_out(all = TRUE) #> INFO  [2024-12-02 10:11:12.506] Start run of 'myPipe' pipeline: #> INFO  [2024-12-02 10:11:12.507] Step 1/4 data #> INFO  [2024-12-02 10:11:12.510] Step 2/4 prep_x #> INFO  [2024-12-02 10:11:12.512] Step 3/4 prep_y #> INFO  [2024-12-02 10:11:12.514] Step 4/4 sum #> INFO  [2024-12-02 10:11:12.515] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.516] Done. #> $data #>   x y #> 1 1 1 #> 2 2 2 #> 3 3 3 #> 4 4 4 #> 5 5 5 #>  #> $prep #> $prep$prep_x #> [1] 1 2 3 4 5 #>  #> $prep$prep_y #> [1]  1  4  9 16 25 #>  #>  #> $sum #> [1]  2  6 12 20 30 #>   ## ------------------------------------------------ ## Method `Pipeline$append` ## ------------------------------------------------  # Append pipeline p1 <- Pipeline$new(\"pipe1\") p1$add(\"step1\", \\(x = 1) x) p2 <- Pipeline$new(\"pipe2\") p2$add(\"step2\", \\(y = 1) y) p1$append(p2) #>          step depends    out keepOut  group  state #>        <char>  <list> <list>  <lgcl> <char> <char> #> 1:       data         [NULL]   FALSE   data    New #> 2:      step1         [NULL]   FALSE  step1    New #> 3: data.pipe2         [NULL]   FALSE   data    New #> 4:      step2         [NULL]   FALSE  step2    New  p3 <- Pipeline$new(\"pipe3\") p3$add(\"step1\", \\(z = 1) z) p1$append(p2)$append(p3) #>           step depends    out keepOut  group  state #>         <char>  <list> <list>  <lgcl> <char> <char> #> 1:        data         [NULL]   FALSE   data    New #> 2:       step1         [NULL]   FALSE  step1    New #> 3:  data.pipe2         [NULL]   FALSE   data    New #> 4:       step2         [NULL]   FALSE  step2    New #> 5:  data.pipe3         [NULL]   FALSE   data    New #> 6: step1.pipe3         [NULL]   FALSE  step1    New  ## ------------------------------------------------ ## Method `Pipeline$append_to_step_names` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\") p$add(\"step1\", \\(x = 1) x) p$add(\"step2\", \\(y = 1) y) p$append_to_step_names(\"new\") p #>         step depends    out keepOut  group  state #>       <char>  <list> <list>  <lgcl> <char> <char> #> 1:  data.new         [NULL]   FALSE   data    New #> 2: step1.new         [NULL]   FALSE  step1    New #> 3: step2.new         [NULL]   FALSE  step2    New p$append_to_step_names(\"new\", sep = \"_\") p #>             step depends    out keepOut  group  state #>           <char>  <list> <list>  <lgcl> <char> <char> #> 1:  data.new_new         [NULL]   FALSE   data    New #> 2: step1.new_new         [NULL]   FALSE  step1    New #> 3: step2.new_new         [NULL]   FALSE  step2    New  ## ------------------------------------------------ ## Method `Pipeline$collect_out` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"step1\", \\(x = ~data) x + 2) p$add(\"step2\", \\(x = ~step1) x + 2, keepOut = TRUE) p$run() #> INFO  [2024-12-02 10:11:12.658] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:12.659] Step 1/3 data #> INFO  [2024-12-02 10:11:12.661] Step 2/3 step1 #> INFO  [2024-12-02 10:11:12.663] Step 3/3 step2 #> INFO  [2024-12-02 10:11:12.664] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.664] Done. p$collect_out() #> $step2 #> [1] 5 6 #>  p$collect_out(all = TRUE) |> str() #> List of 3 #>  $ data : int [1:2] 1 2 #>  $ step1: num [1:2] 3 4 #>  $ step2: num [1:2] 5 6  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"step1\", \\(x = ~data) x + 2, group = \"add\") p$add(\"step2\", \\(x = ~step1, y = 2) x + y, group = \"add\") p$add(\"step3\", \\(x = ~data) x * 3, group = \"mult\") p$add(\"step4\", \\(x = ~data, y = 2) x * y, group = \"mult\") p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:  step1    data [NULL]   FALSE    add    New #> 3:  step2   step1 [NULL]   FALSE    add    New #> 4:  step3    data [NULL]   FALSE   mult    New #> 5:  step4    data [NULL]   FALSE   mult    New p$run() #> INFO  [2024-12-02 10:11:12.695] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:12.696] Step 1/5 data #> INFO  [2024-12-02 10:11:12.699] Step 2/5 step1 #> INFO  [2024-12-02 10:11:12.701] Step 3/5 step2 #> INFO  [2024-12-02 10:11:12.702] Step 4/5 step3 #> INFO  [2024-12-02 10:11:12.704] Step 5/5 step4 #> INFO  [2024-12-02 10:11:12.705] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.706] Done. p$collect_out(all = TRUE) |> str() #> List of 3 #>  $ data: int [1:2] 1 2 #>  $ add :List of 2 #>   ..$ step1: num [1:2] 3 4 #>   ..$ step2: num [1:2] 5 6 #>  $ mult:List of 2 #>   ..$ step3: num [1:2] 3 6 #>   ..$ step4: num [1:2] 2 4  # Grouped by state p$set_params(list(y = 5)) p #>      step depends    out keepOut  group    state #>    <char>  <list> <list>  <lgcl> <char>   <char> #> 1:   data            1,2   FALSE   data     Done #> 2:  step1    data    3,4   FALSE    add     Done #> 3:  step2   step1    5,6   FALSE    add Outdated #> 4:  step3    data    3,6   FALSE   mult     Done #> 5:  step4    data    2,4   FALSE   mult Outdated p$collect_out(groupBy = \"state\", all = TRUE) |> str() #> List of 2 #>  $ Done    :List of 3 #>   ..$ data : int [1:2] 1 2 #>   ..$ step1: num [1:2] 3 4 #>   ..$ step3: num [1:2] 3 6 #>  $ Outdated:List of 2 #>   ..$ step2: num [1:2] 5 6 #>   ..$ step4: num [1:2] 2 4  ## ------------------------------------------------ ## Method `Pipeline$discard_steps` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~add1) x + 2) p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p$discard_steps(\"mult\") #> step 'mult4' was removed #> step 'mult3' was removed p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:   add1    data [NULL]   FALSE   add1    New #> 3:   add2    add1 [NULL]   FALSE   add2    New  # Re-add steps p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:   add1    data [NULL]   FALSE   add1    New #> 3:   add2    add1 [NULL]   FALSE   add2    New #> 4:  mult3    add1 [NULL]   FALSE  mult3    New #> 5:  mult4    add2 [NULL]   FALSE  mult4    New # Discard step 'add1' does'nt work as 'add2' and 'mult3' depend on it try(p$discard_steps(\"add1\")) #> Error in self$remove_step(step, recursive = recursive) :  #>   cannot remove step 'add1' because the following steps depend on it: 'add2', 'mult3' p$discard_steps(\"add1\", recursive = TRUE)   # this works #> Removing step 'add1' and its downstream dependencies: 'add2', 'mult3', 'mult4' #> step 'add1' was removed p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New  # Trying to discard non-existent steps is just ignored p$discard_steps(\"non-existent\")  ## ------------------------------------------------ ## Method `Pipeline$get_data` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$get_data() #> [1] 1 2 p$set_data(3:4) p$get_data() #> [1] 3 4  ## ------------------------------------------------ ## Method `Pipeline$get_depends` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$get_depends() #> $data #> character(0) #>  #> $add1 #>      x  #> \"data\"  #>  #> $add2 #>      x      y  #> \"data\" \"add1\"  #>   ## ------------------------------------------------ ## Method `Pipeline$get_depends_down` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p$get_depends_down(\"add1\") #> [1] \"add2\"  \"mult3\" \"mult4\" p$get_depends_down(\"add1\", recursive = FALSE) #> [1] \"add2\"  \"mult3\"  ## ------------------------------------------------ ## Method `Pipeline$get_depends_up` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$add(\"mult3\", \\(x = ~add1) x * 3) p$add(\"mult4\", \\(x = ~add2) x * 4) p$get_depends_up(\"mult4\") #> [1] \"data\" \"add1\" \"add2\" p$get_depends_up(\"mult4\", recursive = FALSE) #> [1] \"add2\"  ## ------------------------------------------------ ## Method `Pipeline$get_graph` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = ~add1) x + y) p$add(\"mult1\", \\(x = ~add1, y = ~add2) x * y) if (require(\"visNetwork\", quietly = TRUE)) {     do.call(visNetwork, args = p$get_graph()) }  {\"x\":{\"nodes\":{\"id\":[1,2,3,4],\"label\":[\"data\",\"add1\",\"add2\",\"mult1\"],\"group\":[\"data\",\"add1\",\"add2\",\"mult1\"],\"shape\":[\"database\",\"box\",\"box\",\"box\"],\"color\":[\"lightblue\",\"lightblue\",\"lightblue\",\"lightblue\"],\"title\":[\"<p><\\/p>\",\"<p><\\/p>\",\"<p><\\/p>\",\"<p><\\/p>\"]},\"edges\":{\"from\":[1,2,2,3],\"to\":[2,3,4,4],\"arrows\":[\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\"},\"manipulation\":{\"enabled\":false}},\"groups\":[\"data\",\"add1\",\"add2\",\"mult1\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false},\"byselection\":{\"enabled\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\"},\"evals\":[],\"jsHooks\":[]} ## ------------------------------------------------ ## Method `Pipeline$get_out` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(x = ~data) x + 1) p$add(\"add2\", \\(x = ~data, y = ~add1) x + y) p$run() #> INFO  [2024-12-02 10:11:12.826] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:12.827] Step 1/3 data #> INFO  [2024-12-02 10:11:12.829] Step 2/3 add1 #> INFO  [2024-12-02 10:11:12.831] Step 3/3 add2 #> INFO  [2024-12-02 10:11:12.832] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.833] Done. p$get_out(\"add1\") #> [1] 2 3 p$get_out(\"add2\") #> [1] 3 5  ## ------------------------------------------------ ## Method `Pipeline$get_params` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"add3\", \\() 1 + 2) p$get_params() |> str() #> List of 2 #>  $ add1:List of 1 #>   ..$ x: num 1 #>  $ add2:List of 2 #>   ..$ x: num 1 #>   ..$ y: num 2 p$get_params(ignoreHidden = FALSE) |> str() #> List of 2 #>  $ add1:List of 1 #>   ..$ x: num 1 #>  $ add2:List of 3 #>   ..$ x : num 1 #>   ..$ y : num 2 #>   ..$ .z: num 3  ## ------------------------------------------------ ## Method `Pipeline$get_params_at_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"add3\", \\() 1 + 2) p$get_params_at_step(\"add2\") #> $x #> [1] 1 #>  #> $y #> [1] 2 #>  p$get_params_at_step(\"add2\", ignoreHidden = FALSE) #> $x #> [1] 1 #>  #> $y #> [1] 2 #>  #> $.z #> [1] 3 #>  p$get_params_at_step(\"add3\") #> list()  ## ------------------------------------------------ ## Method `Pipeline$get_params_unique` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"mult1\", \\(x = 1, y = 2, .z = 3, b = ~add2) x * y * b) p$get_params_unique() #> $x #> [1] 1 #>  #> $y #> [1] 2 #>  p$get_params_unique(ignoreHidden = FALSE) #> $x #> [1] 1 #>  #> $y #> [1] 2 #>  #> $.z #> [1] 3 #>   ## ------------------------------------------------ ## Method `Pipeline$get_params_unique_json` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, .z = 3) x + y + .z) p$add(\"mult1\", \\(x = 1, y = 2, .z = 3, b = ~add2) x * y * b) p$get_params_unique_json() #> [ #>   { #>     \"name\": \"x\", #>     \"value\": 1 #>   }, #>   { #>     \"name\": \"y\", #>     \"value\": 2 #>   } #> ]  p$get_params_unique_json(ignoreHidden = FALSE) #> [ #>   { #>     \"name\": \"x\", #>     \"value\": 1 #>   }, #>   { #>     \"name\": \"y\", #>     \"value\": 2 #>   }, #>   { #>     \"name\": \".z\", #>     \"value\": 3 #>   } #> ]   ## ------------------------------------------------ ## Method `Pipeline$get_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = 2, z = ~add1) x + y + z) p$run() #> INFO  [2024-12-02 10:11:12.877] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:12.878] Step 1/3 data #> INFO  [2024-12-02 10:11:12.880] Step 2/3 add1 #> INFO  [2024-12-02 10:11:12.883] Step 3/3 add2 #> INFO  [2024-12-02 10:11:12.884] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.884] Done. add1 <- p$get_step(\"add1\") print(add1) #>      step           fun funcName    params depends    out keepOut  group #>    <char>        <list>   <char>    <list>  <list> <list>  <lgcl> <char> #> 1:   add1 <function[1]> function <list[2]>    data    2,3   FALSE   add1 #>    description                time  state #>         <char>              <POSc> <char> #> 1:             2024-12-02 10:11:12   Done add1[[\"params\"]] #> [[1]] #> [[1]]$data #> ~data #> <environment: 0x000002202bb7ed80> #>  #> [[1]]$x #> [1] 1 #>  #>  add1[[\"out\"]] #> [[1]] #> [1] 2 3 #>  try() #> Error in try() : argument \"expr\" is missing, with no default try(p$get_step(\"foo\")) # error: step 'foo' does not exist #> Error : step 'foo' does not exist  ## ------------------------------------------------ ## Method `Pipeline$get_step_names` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$get_step_names() #> [1] \"data\" \"f1\"   \"f2\"    ## ------------------------------------------------ ## Method `Pipeline$get_step_number` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$get_step_number(\"f2\") #> [1] 3  ## ------------------------------------------------ ## Method `Pipeline$has_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$has_step(\"f2\") #> [1] TRUE p$has_step(\"foo\") #> [1] FALSE  ## ------------------------------------------------ ## Method `Pipeline$insert_after` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(x = ~f1) x) p$insert_after(\"f1\", \"f3\", \\(x = ~f1) x) p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New #> 3:     f3      f1 [NULL]   FALSE     f3    New #> 4:     f2      f1 [NULL]   FALSE     f2    New  ## ------------------------------------------------ ## Method `Pipeline$insert_before` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(x = ~f1) x) p$insert_before(\"f2\", \"f3\", \\(x = ~f1) x) p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New #> 3:     f3      f1 [NULL]   FALSE     f3    New #> 4:     f2      f1 [NULL]   FALSE     f2    New  ## ------------------------------------------------ ## Method `Pipeline$length` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$length() #> [1] 3  ## ------------------------------------------------ ## Method `Pipeline$lock_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = 1, data = ~data) x + data) p$add(\"add2\", \\(x = 1, data = ~data) x + data) p$run() #> INFO  [2024-12-02 10:11:12.930] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:12.931] Step 1/3 data #> INFO  [2024-12-02 10:11:12.933] Step 2/3 add1 #> INFO  [2024-12-02 10:11:12.935] Step 3/3 add2 #> INFO  [2024-12-02 10:11:12.936] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.936] Done. p$get_out(\"add1\") #> [1] 2 p$get_out(\"add2\") #> [1] 2 p$lock_step(\"add1\")  p$set_data(3) p$set_params(list(x = 3)) #> skipping setting parameters x at locked step 'add1' p$run() #> INFO  [2024-12-02 10:11:12.958] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:12.959] Step 1/3 data #> INFO  [2024-12-02 10:11:12.962] Step 2/3 add1 - skip 'locked' step #> INFO  [2024-12-02 10:11:12.963] Step 3/3 add2 #> INFO  [2024-12-02 10:11:12.964] Finished execution of steps. #> INFO  [2024-12-02 10:11:12.964] Done. p$get_out(\"add1\") #> [1] 2 p$get_out(\"add2\") #> [1] 6  ## ------------------------------------------------ ## Method `Pipeline$print` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$print() #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New #> 3:     f2         [NULL]   FALSE     f2    New  ## ------------------------------------------------ ## Method `Pipeline$pop_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New #> 3:     f2         [NULL]   FALSE     f2    New p$pop_step() # \"f2\" #> [1] \"f2\" p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New  ## ------------------------------------------------ ## Method `Pipeline$pop_steps_after` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$add(\"f3\", \\(z = 1) z) p$pop_steps_after(\"f1\")  # \"f2\", \"f3\" #> [1] \"f2\" \"f3\" p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New  ## ------------------------------------------------ ## Method `Pipeline$pop_steps_from` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$add(\"f3\", \\(z = 1) z) p$pop_steps_from(\"f2\")  # \"f2\", \"f3\" #> [1] \"f2\" \"f3\" p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New  ## ------------------------------------------------ ## Method `Pipeline$remove_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = ~add1) x + y) p$add(\"mult1\", \\(x = 1, y = ~add2) x * y) p$remove_step(\"mult1\") p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:   add1    data [NULL]   FALSE   add1    New #> 3:   add2    add1 [NULL]   FALSE   add2    New try(p$remove_step(\"add1\"))  # fails because \"add2\" depends on \"add1\" #> Error in p$remove_step(\"add1\") :  #>   cannot remove step 'add1' because the following steps depend on it: 'add2' p$remove_step(\"add1\", recursive = TRUE)  # removes \"add1\" and \"add2\" #> Removing step 'add1' and its downstream dependencies: 'add2' p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New  ## ------------------------------------------------ ## Method `Pipeline$rename_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$add(\"add2\", \\(x = 1, y = ~add1) x + y) p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:   add1    data [NULL]   FALSE   add1    New #> 3:   add2    add1 [NULL]   FALSE   add2    New try(p$rename_step(\"add1\", \"add2\"))  # fails because \"add2\" exists #> Error : step 'add2' already exists p$rename_step(\"add1\", \"first_add\")  # Ok p #>         step   depends    out keepOut  group  state #>       <char>    <list> <list>  <lgcl> <char> <char> #> 1:      data           [NULL]   FALSE   data    New #> 2: first_add      data [NULL]   FALSE   add1    New #> 3:      add2 first_add [NULL]   FALSE   add2    New  ## ------------------------------------------------ ## Method `Pipeline$replace_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~data, y = 2) x + y) p$add(\"mult\", \\(x = 1, y = 2) x * y, keepOut = TRUE) p$run()$collect_out() #> INFO  [2024-12-02 10:11:13.036] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:13.037] Step 1/4 data #> INFO  [2024-12-02 10:11:13.039] Step 2/4 add1 #> INFO  [2024-12-02 10:11:13.042] Step 3/4 add2 #> INFO  [2024-12-02 10:11:13.045] Step 4/4 mult #> INFO  [2024-12-02 10:11:13.047] Finished execution of steps. #> INFO  [2024-12-02 10:11:13.048] Done. #> $mult #> [1] 2 #>  p$replace_step(\"mult\", \\(x = ~add1, y = ~add2) x * y, keepOut = TRUE) p$run()$collect_out() #> INFO  [2024-12-02 10:11:13.051] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:13.052] Step 1/4 data - skip 'done' step #> INFO  [2024-12-02 10:11:13.053] Step 2/4 add1 - skip 'done' step #> INFO  [2024-12-02 10:11:13.054] Step 3/4 add2 - skip 'done' step #> INFO  [2024-12-02 10:11:13.055] Step 4/4 mult #> INFO  [2024-12-02 10:11:13.056] Finished execution of steps. #> INFO  [2024-12-02 10:11:13.057] Done. #> $mult #> [1] 6 #>  try(p$replace_step(\"foo\", \\(x = 1) x))   # step 'foo' does not exist #> Error : step 'foo' does not exist  ## ------------------------------------------------ ## Method `Pipeline$reset` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"f1\", \\(x = 1) x) p$add(\"f2\", \\(y = 1) y) p$run() #> INFO  [2024-12-02 10:11:13.074] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:13.075] Step 1/3 data #> INFO  [2024-12-02 10:11:13.077] Step 2/3 f1 #> INFO  [2024-12-02 10:11:13.078] Step 3/3 f2 #> INFO  [2024-12-02 10:11:13.079] Finished execution of steps. #> INFO  [2024-12-02 10:11:13.080] Done. p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data            1,2   FALSE   data   Done #> 2:     f1              1   FALSE     f1   Done #> 3:     f2              1   FALSE     f2   Done p$reset() p #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1         [NULL]   FALSE     f1    New #> 3:     f2         [NULL]   FALSE     f2    New  ## ------------------------------------------------ ## Method `Pipeline$run` ## ------------------------------------------------  # Simple pipeline p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~add1, z = 2) x + z) p$add(\"final\", \\(x = ~add1, y = ~add2) x * y, keepOut = TRUE) p$run()$collect_out() #> INFO  [2024-12-02 10:11:13.091] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:13.092] Step 1/4 data #> INFO  [2024-12-02 10:11:13.094] Step 2/4 add1 #> INFO  [2024-12-02 10:11:13.096] Step 3/4 add2 #> INFO  [2024-12-02 10:11:13.098] Step 4/4 final #> INFO  [2024-12-02 10:11:13.100] Finished execution of steps. #> INFO  [2024-12-02 10:11:13.101] Done. #> $final #> [1] 8 #>  p$set_params(list(z = 4))  # outdates steps add2 and final p #>      step   depends    out keepOut  group    state #>    <char>    <list> <list>  <lgcl> <char>   <char> #> 1:   data                1   FALSE   data     Done #> 2:   add1      data      2   FALSE   add1     Done #> 3:   add2      add1      4   FALSE   add2 Outdated #> 4:  final add1,add2      8    TRUE  final Outdated p$run()$collect_out() #> INFO  [2024-12-02 10:11:13.110] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:13.111] Step 1/4 data - skip 'done' step #> INFO  [2024-12-02 10:11:13.112] Step 2/4 add1 - skip 'done' step #> INFO  [2024-12-02 10:11:13.113] Step 3/4 add2 #> INFO  [2024-12-02 10:11:13.115] Step 4/4 final #> INFO  [2024-12-02 10:11:13.117] Finished execution of steps. #> INFO  [2024-12-02 10:11:13.117] Done. #> $final #> [1] 12 #>  p$run(cleanUnkept = TRUE)  # clean up temporary results #> INFO  [2024-12-02 10:11:13.119] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:13.120] Step 1/4 data - skip 'done' step #> INFO  [2024-12-02 10:11:13.121] Step 2/4 add1 - skip 'done' step #> INFO  [2024-12-02 10:11:13.122] Step 3/4 add2 - skip 'done' step #> INFO  [2024-12-02 10:11:13.123] Step 4/4 final - skip 'done' step #> INFO  [2024-12-02 10:11:13.123] Finished execution of steps. #> INFO  [2024-12-02 10:11:13.124] Clean temporary results. #> INFO  [2024-12-02 10:11:13.124] Done. p #>      step   depends    out keepOut  group    state #>    <char>    <list> <list>  <lgcl> <char>   <char> #> 1:   data           [NULL]   FALSE   data Outdated #> 2:   add1      data [NULL]   FALSE   add1 Outdated #> 3:   add2      add1 [NULL]   FALSE   add2 Outdated #> 4:  final add1,add2     12    TRUE  final     Done  # Recursive pipeline p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"new_pipe\", \\(x = ~add1) {     pp <- Pipeline$new(\"new_pipe\", data = x)     pp$add(\"add1\", \\(x = ~data) x + 1)     pp$add(\"add2\", \\(x = ~add1) x + 2, keepOut = TRUE)     } ) p$run()$collect_out() #> INFO  [2024-12-02 10:11:13.132] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:13.133] Step 1/3 data #> INFO  [2024-12-02 10:11:13.135] Step 2/3 add1 #> INFO  [2024-12-02 10:11:13.137] Step 3/3 new_pipe #> INFO  [2024-12-02 10:11:13.141] Abort pipeline execution and restart on new. #> INFO  [2024-12-02 10:11:13.142] Start run of 'new_pipe' pipeline: #> INFO  [2024-12-02 10:11:13.143] Step 1/3 data #> INFO  [2024-12-02 10:11:13.145] Step 2/3 add1 #> INFO  [2024-12-02 10:11:13.147] Step 3/3 add2 #> INFO  [2024-12-02 10:11:13.149] Finished execution of steps. #> INFO  [2024-12-02 10:11:13.149] Done. #> $add2 #> [1] 5 #>   # Run pipeline with progress bar p <- Pipeline$new(\"pipe\", data = 1) p$add(\"first step\", \\() Sys.sleep(1)) p$add(\"second step\", \\() Sys.sleep(1)) p$add(\"last step\", \\() Sys.sleep(1)) pb <- txtProgressBar(min = 1, max = p$length(), style = 3) fprogress <- function(value, detail) {    setTxtProgressBar(pb, value) } p$run(progress = fprogress, showLog = FALSE) #>    |                                                                               |                                                                      |   0%   |                                                                               |=======================                                               |  33%   |                                                                               |===============================================                       |  67%   |                                                                               |======================================================================| 100%  ## ------------------------------------------------ ## Method `Pipeline$run_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~add1, z = 2) x + z) p$add(\"mult\", \\(x = ~add1, y = ~add2) x * y) p$run_step(\"add2\") #> INFO  [2024-12-02 10:11:16.242] Start step run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.242] Step 1/3 data (upstream) #> INFO  [2024-12-02 10:11:16.245] Step 2/3 add1 (upstream) #> INFO  [2024-12-02 10:11:16.247] Step 3/3 add2 #> INFO  [2024-12-02 10:11:16.248] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.249] Done. p$run_step(\"add2\", downstream = TRUE) #> INFO  [2024-12-02 10:11:16.267] Start step run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.268] Step 1/4 data (upstream) #> INFO  [2024-12-02 10:11:16.270] Step 2/4 add1 (upstream) #> INFO  [2024-12-02 10:11:16.272] Step 3/4 add2 #> INFO  [2024-12-02 10:11:16.274] Step 4/4 mult (downstream) #> INFO  [2024-12-02 10:11:16.275] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.275] Done. p$run_step(\"mult\", upstream = TRUE) #> INFO  [2024-12-02 10:11:16.277] Start step run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.277] Step 1/4 data (upstream) #> INFO  [2024-12-02 10:11:16.280] Step 2/4 add1 (upstream) #> INFO  [2024-12-02 10:11:16.282] Step 3/4 add2 (upstream) #> INFO  [2024-12-02 10:11:16.283] Step 4/4 mult #> INFO  [2024-12-02 10:11:16.285] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.285] Done.  ## ------------------------------------------------ ## Method `Pipeline$set_data` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y, keepOut = TRUE) p$run()$collect_out() #> INFO  [2024-12-02 10:11:16.289] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.290] Step 1/2 data #> INFO  [2024-12-02 10:11:16.292] Step 2/2 add1 #> INFO  [2024-12-02 10:11:16.293] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.293] Done. #> $add1 #> [1] 2 #>  p$set_data(3) p$run()$collect_out() #> INFO  [2024-12-02 10:11:16.296] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.297] Step 1/2 data #> INFO  [2024-12-02 10:11:16.299] Step 2/2 add1 #> INFO  [2024-12-02 10:11:16.300] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.300] Done. #> $add1 #> [1] 4 #>   ## ------------------------------------------------ ## Method `Pipeline$set_data_split` ## ------------------------------------------------  # Split by three data sets dataList <- list(a = 1, b = 2, c = 3) p <- Pipeline$new(\"pipe\") p$add(\"add1\", \\(x = ~data) x + 1, keepOut = TRUE) p$add(\"mult\", \\(x = ~data, y = ~add1) x * y, keepOut = TRUE) p3 <- p$set_data_split(dataList) p3 #>      step       depends    out keepOut  group    state #>    <char>        <list> <list>  <lgcl> <char>   <char> #> 1: data.a               [NULL]   FALSE      a      New #> 2: add1.a        data.a [NULL]    TRUE      a Outdated #> 3: mult.a data.a,add1.a [NULL]    TRUE      a Outdated #> 4: data.b               [NULL]   FALSE      b      New #> 5: add1.b        data.b [NULL]    TRUE      b Outdated #> 6: mult.b data.b,add1.b [NULL]    TRUE      b Outdated #> 7: data.c               [NULL]   FALSE      c      New #> 8: add1.c        data.c [NULL]    TRUE      c Outdated #> 9: mult.c data.c,add1.c [NULL]    TRUE      c Outdated p3$run()$collect_out() |> str() #> INFO  [2024-12-02 10:11:16.323] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.324] Step 1/9 data.a #> INFO  [2024-12-02 10:11:16.326] Step 2/9 add1.a #> INFO  [2024-12-02 10:11:16.328] Step 3/9 mult.a #> INFO  [2024-12-02 10:11:16.330] Step 4/9 data.b #> INFO  [2024-12-02 10:11:16.332] Step 5/9 add1.b #> INFO  [2024-12-02 10:11:16.334] Step 6/9 mult.b #> INFO  [2024-12-02 10:11:16.336] Step 7/9 data.c #> INFO  [2024-12-02 10:11:16.338] Step 8/9 add1.c #> INFO  [2024-12-02 10:11:16.340] Step 9/9 mult.c #> INFO  [2024-12-02 10:11:16.341] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.341] Done. #> List of 3 #>  $ a:List of 2 #>   ..$ add1.a: num 2 #>   ..$ mult.a: num 2 #>  $ b:List of 2 #>   ..$ add1.b: num 3 #>   ..$ mult.b: num 6 #>  $ c:List of 2 #>   ..$ add1.c: num 4 #>   ..$ mult.c: num 12  # Don't group output by split p <- Pipeline$new(\"pipe\") p$add(\"add1\", \\(x = ~data) x + 1, keepOut = TRUE) p$add(\"mult\", \\(x = ~data, y = ~add1) x * y, keepOut = TRUE) p3 <- p$set_data_split(dataList, groupBySplit = FALSE) p3 #>      step       depends    out keepOut  group    state #>    <char>        <list> <list>  <lgcl> <char>   <char> #> 1: data.a               [NULL]   FALSE data.a      New #> 2: add1.a        data.a [NULL]    TRUE add1.a Outdated #> 3: mult.a data.a,add1.a [NULL]    TRUE mult.a Outdated #> 4: data.b               [NULL]   FALSE data.b      New #> 5: add1.b        data.b [NULL]    TRUE add1.b Outdated #> 6: mult.b data.b,add1.b [NULL]    TRUE mult.b Outdated #> 7: data.c               [NULL]   FALSE data.c      New #> 8: add1.c        data.c [NULL]    TRUE add1.c Outdated #> 9: mult.c data.c,add1.c [NULL]    TRUE mult.c Outdated p3$run()$collect_out() |> str() #> INFO  [2024-12-02 10:11:16.368] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.369] Step 1/9 data.a #> INFO  [2024-12-02 10:11:16.371] Step 2/9 add1.a #> INFO  [2024-12-02 10:11:16.373] Step 3/9 mult.a #> INFO  [2024-12-02 10:11:16.375] Step 4/9 data.b #> INFO  [2024-12-02 10:11:16.377] Step 5/9 add1.b #> INFO  [2024-12-02 10:11:16.379] Step 6/9 mult.b #> INFO  [2024-12-02 10:11:16.380] Step 7/9 data.c #> INFO  [2024-12-02 10:11:16.383] Step 8/9 add1.c #> INFO  [2024-12-02 10:11:16.384] Step 9/9 mult.c #> INFO  [2024-12-02 10:11:16.386] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.386] Done. #> List of 6 #>  $ add1.a: num 2 #>  $ mult.a: num 2 #>  $ add1.b: num 3 #>  $ mult.b: num 6 #>  $ add1.c: num 4 #>  $ mult.c: num 12  ## ------------------------------------------------ ## Method `Pipeline$set_keep_out` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y, keepOut = TRUE) p$add(\"add2\", \\(x = ~data, y = 2) x + y) p$add(\"mult\", \\(x = ~add1, y = ~add2) x * y) p$run()$collect_out() #> INFO  [2024-12-02 10:11:16.395] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:16.396] Step 1/4 data #> INFO  [2024-12-02 10:11:16.398] Step 2/4 add1 #> INFO  [2024-12-02 10:11:16.400] Step 3/4 add2 #> INFO  [2024-12-02 10:11:16.401] Step 4/4 mult #> INFO  [2024-12-02 10:11:16.403] Finished execution of steps. #> INFO  [2024-12-02 10:11:16.403] Done. #> $add1 #> [1] 2 #>  p$set_keep_out(\"add1\", keepOut = FALSE) p$set_keep_out(\"mult\", keepOut = TRUE) p$collect_out() #> $mult #> [1] 6 #>   ## ------------------------------------------------ ## Method `Pipeline$set_params` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1) x + y) p$add(\"add2\", \\(x = ~data, y = 1) x + y) p$add(\"mult\", \\(x = 1, z = 1) x * z) p$get_params() #> $add1 #> $add1$y #> [1] 1 #>  #>  #> $add2 #> $add2$y #> [1] 1 #>  #>  #> $mult #> $mult$x #> [1] 1 #>  #> $mult$z #> [1] 1 #>  #>  p$set_params(list(x = 3, y = 3)) p$get_params() #> $add1 #> $add1$y #> [1] 3 #>  #>  #> $add2 #> $add2$y #> [1] 3 #>  #>  #> $mult #> $mult$x #> [1] 3 #>  #> $mult$z #> [1] 1 #>  #>  p$set_params(list(x = 5, z = 3)) p$get_params() #> $add1 #> $add1$y #> [1] 3 #>  #>  #> $add2 #> $add2$y #> [1] 3 #>  #>  #> $mult #> $mult$x #> [1] 5 #>  #> $mult$z #> [1] 3 #>  #>  suppressWarnings(     p$set_params(list(foo = 3))  # warning: trying to set undefined )  ## ------------------------------------------------ ## Method `Pipeline$set_params_at_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = ~data, y = 1, z = 2) x + y) p$add(\"add2\", \\(x = ~data, y = 1, z = 2) x + y) p$set_params_at_step(\"add1\", list(y = 3, z = 3)) p$get_params() #> $add1 #> $add1$y #> [1] 3 #>  #> $add1$z #> [1] 3 #>  #>  #> $add2 #> $add2$y #> [1] 1 #>  #> $add2$z #> [1] 2 #>  #>  try(p$set_params_at_step(\"add1\", list(foo = 3))) # foo not defined #> Error in p$set_params_at_step(\"add1\", list(foo = 3)) :  #>   Unable to set parameter(s) foo at step add1 - candidates are y, z  ## ------------------------------------------------ ## Method `Pipeline$split` ## ------------------------------------------------  # Example for two independent calculation paths p <- Pipeline$new(\"pipe\", data = 1) p$add(\"f1\", \\(x = ~data) x) p$add(\"f2\", \\(x = 1) x) p$add(\"f3\", \\(x = ~f1) x) p$add(\"f4\", \\(x = ~f2) x) p$split() #> [[1]] #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:   data         [NULL]   FALSE   data    New #> 2:     f1    data [NULL]   FALSE     f1    New #> 3:     f3      f1 [NULL]   FALSE     f3    New #>  #> [[2]] #>      step depends    out keepOut  group  state #>    <char>  <list> <list>  <lgcl> <char> <char> #> 1:     f2         [NULL]   FALSE     f2    New #> 2:     f4      f2 [NULL]   FALSE     f4    New #>   # Example of split by three data sets dataList <- list(a = 1, b = 2, c = 3) p <- Pipeline$new(\"pipe\") p$add(\"add1\", \\(x = ~data) x + 1, keepOut = TRUE) p$add(\"mult\", \\(x = ~data, y = ~add1) x * y, keepOut = TRUE) pips <- p$set_data_split(dataList)$split()  ## ------------------------------------------------ ## Method `Pipeline$unlock_step` ## ------------------------------------------------  p <- Pipeline$new(\"pipe\", data = 1) p$add(\"add1\", \\(x = 1, data = ~data) x + data) p$add(\"add2\", \\(x = 1, data = ~data) x + data) p$lock_step(\"add1\") p$set_params(list(x = 3)) #> skipping setting parameters x at locked step 'add1' p$get_params() #> $add1 #> $add1$x #> [1] 1 #>  #>  #> $add2 #> $add2$x #> [1] 3 #>  #>  p$unlock_step(\"add1\") p$set_params(list(x = 3)) p$get_params() #> $add1 #> $add1$x #> [1] 3 #>  #>  #> $add2 #> $add2$x #> [1] 3 #>  #>"},{"path":"https://github.com/rpahl/pipeflow/reference/pipelineAliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipeline alias functions — pipelineAliases","title":"Pipeline alias functions — pipelineAliases","text":"Alias functions, one member function Pipeline object.","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/pipelineAliases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline alias functions — pipelineAliases","text":"","code":"pipe_add(pip, ...)  pipe_append(pip, ...)  pipe_append_to_step_names(pip, ...)  pipe_clone(pip, ...)  pipe_collect_out(pip, ...)  pipe_discard_steps(pip, ...)  pipe_get_data(pip, ...)  pipe_get_depends(pip, ...)  pipe_get_depends_down(pip, ...)  pipe_get_depends_up(pip, ...)  pipe_get_graph(pip, ...)  pipe_get_out(pip, ...)  pipe_get_params(pip, ...)  pipe_get_params_at_step(pip, ...)  pipe_get_params_unique(pip, ...)  pipe_get_params_unique_json(pip, ...)  pipe_get_step(pip, ...)  pipe_get_step_names(pip, ...)  pipe_get_step_number(pip, ...)  pipe_has_step(pip, ...)  pipe_insert_after(pip, ...)  pipe_insert_before(pip, ...)  pipe_length(pip, ...)  pipe_lock_step(pip, ...)  pipe_new(...)  pipe_print(pip, ...)  pipe_pop_step(pip, ...)  pipe_pop_steps_after(pip, ...)  pipe_pop_steps_from(pip, ...)  pipe_remove_step(pip, ...)  pipe_rename_step(pip, ...)  pipe_replace_step(pip, ...)  pipe_reset(pip, ...)  pipe_run(pip, ...)  pipe_run_step(pip, ...)  pipe_set_data(pip, ...)  pipe_set_data_split(pip, ...)  pipe_set_keep_out(pip, ...)  pipe_set_params(pip, ...)  pipe_set_params_at_step(pip, ...)  pipe_split(pip, ...)  pipe_unlock_step(pip, ...)"},{"path":"https://github.com/rpahl/pipeflow/reference/pipelineAliases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline alias functions — pipelineAliases","text":"pip pipeline object ... Arguments passed respective pipeline method","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/pipelineAliases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipeline alias functions — pipelineAliases","text":"result respective pipeline method","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/set_log_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Set pipeflow log layout — set_log_layout","title":"Set pipeflow log layout — set_log_layout","text":"Set pipeflow log layout","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/set_log_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set pipeflow log layout — set_log_layout","text":"","code":"set_log_layout(layout)"},{"path":"https://github.com/rpahl/pipeflow/reference/set_log_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set pipeflow log layout — set_log_layout","text":"layout Layout name","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/set_log_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set pipeflow log layout — set_log_layout","text":"invisibly returns logger object","code":""},{"path":"https://github.com/rpahl/pipeflow/reference/set_log_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set pipeflow log layout — set_log_layout","text":"","code":"p <- Pipeline$new(\"pipe\", data = 1:2) p$add(\"add1\", \\(data = ~data, x = 1) x + data) p$run() #> INFO  [2024-12-02 10:11:19.810] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:19.811] Step 1/2 data #> INFO  [2024-12-02 10:11:19.812] Step 2/2 add1 #> INFO  [2024-12-02 10:11:19.814] Finished execution of steps. #> INFO  [2024-12-02 10:11:19.814] Done.  lg <- set_log_layout(\"json\") print(lg) #> <Logger> [info] pipeflow #>  #> appenders: #>   [[1]]: <AppenderConsole> [all] -> console  p$run() #> {\"application\":\"pipeflow\",\"level\":\"info\",\"time\":\"2024-12-02T10:11:19+1:00\",\"message\":\"Start run of 'pipe' pipeline:\"} #> {\"application\":\"pipeflow\",\"level\":\"info\",\"time\":\"2024-12-02T10:11:19+1:00\",\"message\":\"Step 1/2 data - skip 'done' step\"} #> {\"application\":\"pipeflow\",\"level\":\"info\",\"time\":\"2024-12-02T10:11:19+1:00\",\"message\":\"Step 2/2 add1 - skip 'done' step\"} #> {\"application\":\"pipeflow\",\"level\":\"info\",\"time\":\"2024-12-02T10:11:19+1:00\",\"message\":\"Finished execution of steps.\"} #> {\"application\":\"pipeflow\",\"level\":\"info\",\"time\":\"2024-12-02T10:11:19+1:00\",\"message\":\"Done.\"}  set_log_layout(\"text\") p$run() #> INFO  [2024-12-02 10:11:19.851] Start run of 'pipe' pipeline: #> INFO  [2024-12-02 10:11:19.852] Step 1/2 data - skip 'done' step #> INFO  [2024-12-02 10:11:19.853] Step 2/2 add1 - skip 'done' step #> INFO  [2024-12-02 10:11:19.854] Finished execution of steps. #> INFO  [2024-12-02 10:11:19.854] Done."}]
