!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
...	.\R\load.R	/^.this_package_path <- function(...)$/;"	a
...	.\R\param.R	/^BooleanParam  = function(...) methods::new("BooleanParam", ...)$/;"	a
...	.\R\param.R	/^CategoricalParam  = function(...) methods::new("CategoricalParam", ...)$/;"	a
...	.\R\param.R	/^DataframeParam  = function(...) methods::new("DataframeParam", ...)$/;"	a
...	.\R\param.R	/^ListParam  = function(...) methods::new("ListParam", ...)$/;"	a
...	.\R\param.R	/^NumericParam  = function(...) methods::new("NumericParam", ...)$/;"	a
...	.\R\param.R	/^StringParam  = function(...) methods::new("StringParam", ...)$/;"	a
...	.\tests\testthat\helper_general.R	/^expect_equivalent = function(...) {$/;"	a
...	.\tests\testthat\helper_general.R	/^expect_no_error = function(...) {$/;"	a
...	.\tests\testthat\helper_general.R	/^expect_no_warning = function(...) {$/;"	a
...	.\tests\testthat\test_param.R	/^    f = function(...) new("NumericParam", name = "foo", ...)$/;"	a
...	.\tests\testthat\test_param.R	/^    f = function(...) new("NumericParam", name = "foo", value = 0, ...)$/;"	a
.get_formatted_time	.\R\utils_log.R	/^.get_formatted_time <- function(time = Sys.time()) {$/;"	f
.log	.\R\utils_log.R	/^.log <- function($/;"	f
.my_func	.\tests\testthat\test_pipeline.R	/^    .my_func <- function(x = 3) {$/;"	f
.onLoad	.\R\load.R	/^.onLoad <- function(libname, pkgname)$/;"	f
.self	.\tests\testthat\test_pipeline.R	/^            function(.self = NULL, data = ~.data)$/;"	a
.this_package_name	.\R\load.R	/^.this_package_name <- function()$/;"	f
.this_package_path	.\R\load.R	/^.this_package_path <- function(...)$/;"	f
LogLayoutJson	.\R\utils_log.R	/^LogLayoutJson <- R6::R6Class($/;"	g
a	.\tests\testthat\test_pipeline.R	/^            pipe_add("f1", function(a = 1) a) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        add("f1", function(a = 1) a)\$$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("calc", function(a = 1) a) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f0", function(a = 1) a, keepOut = TRUE, group = "id") |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1) a) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1) a)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1) a, keepOut = TRUE) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1) a, keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1) a, keepOut = TRUE, group = "id") |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1) {}, keepOut = TRUE) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1, .b = 2) a + .b)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1, .b = 2) a + b)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1, .hidden = 2) a)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1, b = 2) a + b) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1, b = 2) a + b)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 1, b = ~.data) a + b)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 10) a, keepOut = FALSE) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = 2) a) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = ~.data) a + a)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = ~.data) a + a, keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(a = ~.data) a, keepOut = TRUE) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a = 1) a)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a = 2) a)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a = 2, b = ~f1) a + b) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a = 2, b = ~f1) a + b, keepOut = TRUE,$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a = ~f1, b = ~.data) b, keepOut = TRUE) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a = ~f1, b = ~.data) b, keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a = ~f1, b = ~.data) {$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a, b = ~f1) a + b, params = list(a = 8)) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(a, b = ~f1) a + b,$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a = 3, b = ~f2) a + b, keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a = 3, b = ~f2) a \/ b, keepOut = TRUE) |>$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a = ~f1, b = ~.data) b[, 2:3], keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a = ~f2, b = 3) a + b, keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a = ~f2, b = 3) paste(a, b), keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a = ~f2, b = 3, c = 4) a + b)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a = ~f2, b = 3, c = 4) a + b, keepOut = TRUE)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^        pipe_add("f4", function(a = 3, b = ~f2) a + b, keepOut = TRUE,$/;"	a
a	.\tests\testthat\test_pipeline.R	/^    bar <- function(a = 1, b = 2) a + b$/;"	a
a	.\tests\testthat\test_pipeline.R	/^    bar <- function(a, b) a + b$/;"	a
a	.\tests\testthat\test_pipeline.R	/^    foo <- function(a = 0) a$/;"	a
a	.\tests\testthat\test_pipeline.R	/^    foo <- function(a = 1) a$/;"	a
a	.\tests\testthat\test_pipeline.R	/^    foo <- function(a, b = 1) a + b$/;"	a
a	.\tests\testthat\test_pipeline.R	/^    pip$add("f1", function(a = 5) a)$/;"	a
a	.\tests\testthat\test_pipeline.R	/^    pip$add("f2", function(a, b) a + b,$/;"	a
a	.\tests\testthat\test_utils_log.R	/^        foo = function(a, b) {$/;"	a
a2	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(a2 = ~.data) 2 * a2, keepOut = TRUE) |>$/;"	a
after	.\tests\testthat\test_pipeline.R	/^    after <- pip$set_common_parameters(list(a = 9, b = 99))$get_parameters()$/;"	v
arg	.\R\pipeline.R	/^                          function(arg) {$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        add("f2", function(b = ~f1) b)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = 1) b)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = 2) b + b, keepOut = TRUE)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = 2) b) |>$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = 2) b)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = 2) b, keepOut = TRUE)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = ~f1) b)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = ~f1) b, keepOut = TRUE)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = ~f1) stop("something went wrong"))$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(b = ~f1, c = ~.data, keepOut = FALSE) b + c)$/;"	a
b	.\tests\testthat\test_pipeline.R	/^        pipe_add("f4", function(b = 3, c = 4) b + c, keepOut = TRUE) |>$/;"	a
b	.\tests\testthat\test_pipeline.R	/^    pip$add("f2", function(b = 2) b)$/;"	a
bar	.\tests\testthat\test_pipeline.R	/^    bar <- function(a = 1, b = 2) a + b$/;"	f
bar	.\tests\testthat\test_pipeline.R	/^    bar <- function(a, b) a + b$/;"	f
before	.\tests\testthat\test_pipeline.R	/^    before <- pip$get_parameters()$/;"	v
c	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(c = ~f2) c, keepOut = TRUE)$/;"	a
class	.\R\param.R	/^    create_Param = function(class, ...) {$/;"	a
cond	.\R\utils_log.R	/^    condition_handler <- function(cond) {$/;"	a
condition_handler	.\R\utils_log.R	/^    condition_handler <- function(cond) {$/;"	f
dat	.\tests\testthat\test_pipeline.R	/^        dat <- data.frame(a = 1:2, b = 1:2)$/;"	v
dat	.\tests\testthat\test_pipeline.R	/^    dat <- data.frame(a = 1:2, b = 1:2)$/;"	v
dat	.\tests\testthat\test_pipeline.R	/^    dat <- data.frame(x = 1:2, y = 1:2, z = 1:2)$/;"	v
data	.\R\pipeline.R	/^            init_new_pipeline_with_data = function(data) {$/;"	a
data	.\R\pipeline.R	/^        set_data = function(data)$/;"	a
data	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(data = ~.data) {$/;"	a
data	.\tests\testthat\test_pipeline.R	/^    pip$add("f1", function(data = ~.data) data, keepOut = TRUE)$/;"	a
dataList	.\tests\testthat\test_pipeline.R	/^    dataList <- list(A = 1, B = 2, C = 3)$/;"	v
dataList	.\tests\testthat\test_pipeline.R	/^    dataList <- list(A = 1, B = 2, C = 3, D = 4)$/;"	v
dataList	.\tests\testthat\test_pipeline.R	/^    dataList <- list(A = dat, B = dat, C = dat)$/;"	v
dataList	.\tests\testthat\test_pipeline.R	/^    dataList <- list(dat, dat)$/;"	v
dep	.\R\pipeline.R	/^            stop_on_missing_dep = function(dep) {$/;"	a
deps	.\R\pipeline.R	/^                    function(deps) {$/;"	a
deps	.\R\pipeline.R	/^            deps <- params |>$/;"	v
deps	.\R\pipeline.R	/^        .verify_deps = function(deps, name, to = self$length())$/;"	a
event	.\R\utils_log.R	/^        format_event = function(event) {$/;"	a
expr	.\R\utils_log.R	/^tryCatchLog <- function (expr, ..., # nolint$/;"	a
extra	.\R\pipeline.R	/^            extra <- setdiff(names(params), names(current))$/;"	v
foo	.\tests\testthat\test_pipeline.R	/^    foo <- function(a = 0) a$/;"	f
foo	.\tests\testthat\test_pipeline.R	/^    foo <- function(a = 1) a$/;"	f
foo	.\tests\testthat\test_pipeline.R	/^    foo <- function(a, b = 1) a + b$/;"	f
from	.\R\pipeline.R	/^        execute = function(from = 1, to = self$length())$/;"	a
fun	.\R\pipeline.R	/^            if (is.function(fun)) {$/;"	a
fun	.\R\pipeline.R	/^        .verify_fun_params = function(fun, funcName, params)$/;"	a
groupBy	.\R\pipeline.R	/^        collect_out = function(groupBy = "group") {$/;"	a
hasArgName	.\tests\testthat\test_pipeline.R	/^    hasArgName <- l[["name"]][[1]] == "x"$/;"	v
hasArgName	.\tests\testthat\test_pipeline.R	/^    hasArgName <- l[["name"]][[2]] == "y"$/;"	v
hours_diff	.\R\utils_log.R	/^    hours_diff <- round(as.numeric(difftime(local, gmt, units = "hours")))$/;"	v
i	.\R\param.R	/^    extract_ith_param = function(i) {$/;"	a
i	.\R\pipeline.R	/^        .execute_row = function(i)$/;"	a
ignoreHidden	.\R\pipeline.R	/^        get_parameters = function(ignoreHidden = TRUE)$/;"	a
ignoreHidden	.\R\pipeline.R	/^        get_unique_parameters = function(ignoreHidden = TRUE)$/;"	a
ignoreHidden	.\R\pipeline.R	/^        get_unique_parameters_json = function(ignoreHidden = TRUE)$/;"	a
isValidJSON	.\tests\testthat\test_pipeline.R	/^        isValidJSON <- sapply(log, jsonlite::validate)$/;"	v
layout	.\R\utils_log.R	/^set_log_layout <- function(layout)$/;"	a
libname	.\R\load.R	/^.onLoad <- function(libname, pkgname)$/;"	a
log	.\tests\testthat\test_pipeline.R	/^        log <- utils::capture.output(pip$execute())$/;"	v
log	.\tests\testthat\test_pipeline.R	/^        log <- utils::capture.output({$/;"	v
log_error	.\R\utils_log.R	/^log_error <- function(msg, ...) {$/;"	f
log_info	.\R\utils_log.R	/^log_info <- function(msg, ...) {$/;"	f
log_warn	.\R\utils_log.R	/^log_warn <- function(msg, ...) {$/;"	f
logfun	.\R\utils_log.R	/^    logfun <- logger[[level]]$/;"	v
msg	.\R\utils_log.R	/^log_error <- function(msg, ...) {$/;"	a
msg	.\R\utils_log.R	/^log_info <- function(msg, ...) {$/;"	a
msg	.\R\utils_log.R	/^log_warn <- function(msg, ...) {$/;"	a
name	.\R\pipeline.R	/^        .verify_name = function(name)$/;"	a
name	.\R\pipeline.R	/^        add = function(name,$/;"	a
name	.\R\pipeline.R	/^        deep_clone = function(name, value) {$/;"	a
name	.\R\pipeline.R	/^        get_parameters_at_step = function(name, ignoreHidden = TRUE)$/;"	a
name	.\R\pipeline.R	/^        get_step = function(name)$/;"	a
name	.\R\pipeline.R	/^        initialize = function(name, data = NULL)$/;"	a
name	.\R\pipeline.R	/^        pop_steps_after = function(name) {$/;"	a
name	.\R\pipeline.R	/^        pop_steps_from = function(name) {$/;"	a
name	.\R\pipeline.R	/^        remove_step = function(name) {$/;"	a
new	.\R\pipeline.R	/^                new <- utils::modifyList(old, params[toUpdate])$/;"	v
number_str	.\R\utils_log.R	/^    number_str <- paste0(toString(hours_diff), ":00")$/;"	v
old	.\R\pipeline.R	/^                old <- self$pipeline[["params"]][[row]]$/;"	v
out	.\tests\testthat\test_pipeline.R	/^    out <- pip$execute()$collect_out()$/;"	v
out	.\tests\testthat\test_pipeline.R	/^    out <- pp$execute()$collect_out()$/;"	v
out	.\tests\testthat\test_pipeline.R	/^    out <- utils::capture.output(cat(p))$/;"	v
out	.\tests\testthat\test_utils_log.R	/^        out <- utils::capture.output(.log("my message"))$/;"	v
out	.\tests\testthat\test_utils_log.R	/^        out <- utils::capture.output(.log("my message", my_field = s))$/;"	v
out	.\tests\testthat\test_utils_log.R	/^        out <- utils::capture.output(log_error("my message"))$/;"	v
out	.\tests\testthat\test_utils_log.R	/^        out <- utils::capture.output(log_info("my message"))$/;"	v
out	.\tests\testthat\test_utils_log.R	/^        out <- utils::capture.output(log_warn("my message"))$/;"	v
out	.\tests\testthat\test_utils_log.R	/^        out <- utils::capture.output({$/;"	v
out1	.\tests\testthat\test_pipeline.R	/^    out1 <- pip1$execute()$collect_out()$/;"	v
out2	.\tests\testthat\test_pipeline.R	/^    out2 <- pip2$execute()$collect_out()$/;"	v
p	.\R\param.R	/^    params = lapply(x, function(p) as.list(attributes(eval(p))))$/;"	a
p	.\R\pipeline.R	/^            isParam = sapply(params, function(p) methods::is(p, "Param"))$/;"	a
p	.\R\pipeline.R	/^        append = function(p, outAsIn = FALSE)$/;"	a
p	.\tests\testthat\test_pipeline.R	/^    p <- pip$get_parameters()$/;"	v
p	.\tests\testthat\test_pipeline.R	/^    p <- pip$get_parameters(ignoreHidden = FALSE)$/;"	v
p	.\tests\testthat\test_pipeline.R	/^    p <- pip$get_unique_parameters()$/;"	v
p	.\tests\testthat\test_pipeline.R	/^    p <- pip$get_unique_parameters_json()$/;"	v
params	.\R\pipeline.R	/^        .derive_deps = function(params, name, to = self$length())$/;"	a
params	.\R\pipeline.R	/^        set_common_parameters = function(params, warnUndefined = TRUE)$/;"	a
pattern	.\R\pipeline.R	/^        discard_steps = function(pattern, fixed = TRUE, ...) {$/;"	a
pip	.\R\pipeline.R	/^        .add_prefix_to_step_names = function(pip, prefix) {$/;"	a
pp	.\tests\testthat\test_pipeline.R	/^    pp <- pip1$append(pip2)$/;"	v
pp	.\tests\testthat\test_pipeline.R	/^    pp <- pip1$append(pip2, outAsIn = TRUE)$/;"	v
pp	.\tests\testthat\test_pipeline.R	/^    pp <- pip1$append(pip2, outAsIn = TRUE)$append(pip3, outAsIn = TRUE)$/;"	v
res	.\tests\testthat\test_pipeline.R	/^    res <- pip$execute()$collect_out() |>$/;"	v
res	.\tests\testthat\test_utils_log.R	/^        res <- lgr::without_logging(tryCatchLog(foo(1, 2)))$/;"	v
set_log_layout	.\R\utils_log.R	/^set_log_layout <- function(layout)$/;"	f
step	.\R\pipeline.R	/^            step <- self$get_step(name)$/;"	v
subpipe	.\R\pipeline.R	/^            collect_by_group = function(subpipe) {$/;"	a
testdata_dir	.\tests\testthat\helper_test_data.R	/^testdata_dir <- function()$/;"	f
time	.\R\utils_log.R	/^.get_formatted_time <- function(time = Sys.time()) {$/;"	a
tryCatchLog	.\R\utils_log.R	/^tryCatchLog <- function (expr, ..., # nolint$/;"	f
value	.\tests\testthat\test_param.R	/^    f = function(value)$/;"	a
x	.\R\param.R	/^param_list_from_json = function(x)$/;"	a
x	.\R\param.R	/^param_list_to_json = function(x)$/;"	a
x	.\R\pipeline.R	/^                        if (all(sapply(res, function(x) length(x) == 1))) {$/;"	a
x	.\R\pipeline.R	/^                    function(x) if (length(x) == 1) out[[x]] else out[x]$/;"	a
x	.\R\pipeline.R	/^                Filter(f = function(x) methods::is(x, "formula")) |>$/;"	a
x	.\R\pipeline.R	/^                f = function(x) x == name,$/;"	a
x	.\R\pipeline.R	/^                function(x) {$/;"	a
x	.\R\pipeline.R	/^                lapply(function(x) sapply(x, add_prefix))$/;"	a
x	.\R\pipeline.R	/^                sapply(FUN = function(x) deparse(x[[2]]))$/;"	a
x	.\R\pipeline.R	/^                update_if_needed = function(x) {$/;"	a
x	.\R\pipeline.R	/^            Filter(res, f = function(x) length(x) > 0)$/;"	a
x	.\R\pipeline.R	/^            add_prefix = function(x) paste0(prefix, ".", x)$/;"	a
x	.\R\pipeline.R	/^            areHidden = function(x) {$/;"	a
x	.\R\pipeline.R	/^            are_negative_numbers = function(x) grepl("^-[0-9]*", x = x)$/;"	a
x	.\R\pipeline.R	/^            argsWithNoDefault = names(Filter(fargs, f = function(x) is.name(x)))$/;"	a
x	.\R\pipeline.R	/^            combined = Reduce(c(pip, pipes), f = function(x, y) x$append(y))$/;"	a
x	.\R\pipeline.R	/^            dependents = names(Filter(x = deps, f = function(x) name %in% x))$/;"	a
x	.\R\pipeline.R	/^            exceeding = Filter(absolute_indices, f = function(x) x < 1)$/;"	a
x	.\R\pipeline.R	/^            filter_desired_parameters = function(x) {$/;"	a
x	.\R\pipeline.R	/^            isValue = function(x) !is.name(x) && !is.call(x)$/;"	a
x	.\R\pipeline.R	/^            pipe_names = sapply(pipes, function(x) x$name)$/;"	a
x	.\R\pipeline.R	/^.replace_string = function(x, target, replacement) {$/;"	a
x	.\R\pipeline.R	/^pipe_add = function(x, ...)$/;"	a
x	.\R\utils_log.R	/^            sapply(FUN = function(x) inherits(cond, x)) |>$/;"	a
x	.\R\utils_misc.R	/^`%||%` <- function(x, y) {$/;"	a
x	.\R\utils_misc.R	/^is_number = function(x) {$/;"	a
x	.\R\utils_misc.R	/^is_string = function(x) {$/;"	a
x	.\R\utils_misc.R	/^unlist1 = function(x, ...)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^            f = function(x) x[["level"]] == "warn"$/;"	a
x	.\tests\testthat\test_pipeline.R	/^            pipe_add("f1", function(x = ~.data) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(x = 1) x) |>$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(x = 1) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(x = 1:3) x, keepOut = TRUE)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(x = 3) x, keepOut = TRUE)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(x = new("StringParam", "my x", "some x")) x) |>$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(x = ~.data) x, keepOut = TRUE)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(x = 1) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(x = 1, y = 2) x + y)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(x = 1, y = ~f1) x + y)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(x = ~f1) x) |>$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(x = ~f1) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(x = ~f1, y = ~f2) list(x, y), keepOut = TRUE) |>$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f3", function(x = ~f2) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f4", function(x = ~f3) x[[1]], keepOut = TRUE)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("f5", function(x = ~.data, y = ~f4) x * y, keepOut = TRUE)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("plot1", function(x = ~calc) x) |>$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        pipe_add("plot2", function(x = ~plot1) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^        unlist(lapply(dataList, function(x) x + 1))$/;"	a
x	.\tests\testthat\test_pipeline.R	/^    .my_func <- function(x = 3) {$/;"	a
x	.\tests\testthat\test_pipeline.R	/^    expect_error(pip$add("f1", function(x) x), "name 'f1' already exists")$/;"	a
x	.\tests\testthat\test_pipeline.R	/^    pip$add("f", function(x = ~f1) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^    pip$add("f2", function(x = ~-1) 2*x, keepOut = TRUE)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^    pip$add("f2", function(x = ~-1) x)$/;"	a
x	.\tests\testthat\test_pipeline.R	/^    pip$add("f3", function(x = ~-1, a = ~-2) x + a, keepOut = TRUE)$/;"	a
xCol	.\tests\testthat\test_pipeline.R	/^        pipe_add("f1", function(xCol = new("StringParam", "xCol", "x")) xCol,$/;"	a
y	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(y = new("StringParam", "my y", "some y")) y)$/;"	a
yCol	.\tests\testthat\test_pipeline.R	/^        pipe_add("f2", function(yCol, b = ~f1) paste(yCol, b),$/;"	a
z	.\tests\testthat\test_pipeline.R	/^        pip$add("f3", function(z = ~-10) x),$/;"	a
z	.\tests\testthat\test_pipeline.R	/^    expect_error(pip$replace_step("f2", function(z = ~f2) z),$/;"	a
z	.\tests\testthat\test_pipeline.R	/^    expect_error(pip$replace_step("f2", function(z = ~f3) z),$/;"	a
z	.\tests\testthat\test_pipeline.R	/^    expect_error(pip$replace_step("f2", function(z = ~foo) z),$/;"	a
z	.\tests\testthat\test_pipeline.R	/^    expect_error(pip$replace_step("non-existent", function(z = 4) z))$/;"	a
z	.\tests\testthat\test_pipeline.R	/^    pip$replace_step("f2", function(z = 4) z)$/;"	a
